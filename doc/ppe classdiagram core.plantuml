@startuml

allowmixing

skin rose

title PPE Core - Class Diagram

package "Process Definition Meta Model" {
	
	
	metaclass "StepDefinition" <<InstanceType>>  {
	Map expectedInput
	Map expectedOutput
	Set transitionConditions
	Set QAconstraints
	Map ioMappingRules
	=========
		OCL rule/constraints as text
	}
	
	metaclass "ProcessDefinition" <<InstanceType>>  {

	} 
	
	"StepDefinition" <|-- ProcessDefinition
	
	struct ProcessDTO {
		serializable process definition
	}
	
	entity ProcessDefinitionA <<Instance>> #aliceblue
	
	entity StepDefinitionB <<Instance>> #aliceblue
	

	ProcessDTO -down-> ProcessDefinitionA : becomes
	ProcessDTO -down-> StepDefinitionB : becomes

	ProcessDefinitionA -up-|> ProcessDefinition
	StepDefinitionB -up-|> StepDefinition
	
}

cloud "SerializedProcessDefinition"  {
	component [FileSystemLoader]
	component [ProcessEditor \n (via REST endpoint)]
	component [Stages \n (via REST endpoint and transformer)]
}

	SerializedProcessDefinition -left-> ProcessDTO : provide

package "Process Instance Meta Model (dynamically generated)" {

	class "ProcessInstanceTypeA" <<InstanceType>>  {
		ProcessDefinition definition
	}
	
	class "ProcessStep" <<InstanceType>>  {
		StepDefinition stepDefinition
		State actualState
	  State expectedState
	}
	
	class "ProcessStepB" <<InstanceType>> {
		Input<<InstanceType>> in_x 
		Output<<InstanceType>> out_y
		Precondition pre
	  Postcondition post
	  QAconstraints qa
	  DataMapping dm_xy
	=========
		OCL rule/constraints as objects
	}
	
		
	class "ProcessStepProcessA" <<InstanceType>> {
		Input<<InstanceType>> in_x 
		Output<<InstanceType>> out_y
		Precondition pre
	  Postcondition post
	  QAconstraints qa
	  DataMapping dm_xy
	=========
		OCL rule/constraints as objects
	}
	
	class PreConditionStepB<<ConsistencyRuleType>> #aliceblue
	class PostConditionStepB<<ConsistencyRuleType>> #aliceblue
	class QAConstraint1StepB<<ConsistencyRuleType>> #aliceblue
	class MappingXYStepB<<ConsistencyRuleType>> #aliceblue

	ProcessStepB::pre o-down- "0..1" PreConditionStepB
	ProcessStepB::post o-down- "1" PostConditionStepB
	ProcessStepB::qa o-down- "0..n" QAConstraint1StepB
	ProcessStepB::dm_xy o-down- "0..n" MappingXYStepB

	"ProcessStepB" -up-|> "ProcessStep"
	"ProcessStepProcessA" -up-|> "ProcessStep"
	"ProcessInstanceTypeA" -up-|> "ProcessStepProcessA"
	
	ProcessInstanceTypeA::definition -left-> ProcessDefinition : hasDefinition
	ProcessStep::stepDefinition -left-> StepDefinition : hasDefinition
}

class ConsistencyRuleType <<InstanceType>> {
	String rule
	boolean hasError
	getEvaluationResult(Instance context)
}

PreConditionStepB -up-|> ConsistencyRuleType
PostConditionStepB -up-|> ConsistencyRuleType
QAConstraint1StepB -up-|> ConsistencyRuleType
MappingXYStepB -up-|> ConsistencyRuleType



@enduml