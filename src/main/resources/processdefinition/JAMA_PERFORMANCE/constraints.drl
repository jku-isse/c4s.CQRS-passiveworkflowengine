package processdefinition;

import org.axonframework.commandhandling.gateway.CommandGateway;

import passiveprocessengine.instance.QACheckDocument;
import passiveprocessengine.instance.WorkflowTask;
import passiveprocessengine.instance.ResourceLink;
import java.util.Optional;
import passiveprocessengine.instance.RuleEngineBasedConstraint;
import java.time.Instant;
import passiveprocessengine.instance.CorrelationTuple;
import passiveprocessengine.instance.ConstraintTrigger;
import passiveprocessengine.instance.WorkflowInstance;

import impactassessment.api.Commands.AddEvaluationResultToConstraintCmd;
import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.ArrayList;

import artifactapi.IArtifactRegistry;
import artifactapi.jira.IJiraArtifact;
import artifactapi.jama.IJamaArtifact;
import artifactapi.jira.subtypes.IJiraIssueLink;
import artifactapi.IArtifactRegistry;

import impactassessment.kiesession.KieSessionUtils;
import java.util.Map;
import java.util.HashMap;
import impactassessment.api.Commands.AddConstraintsCmd;
import passiveprocessengine.instance.ResourceLink;
import passiveprocessengine.instance.WorkflowTask;
import artifactapi.jama.subtypes.IJamaRelease
import impactassessment.artifactconnector.jama.JamaArtifact
import artifactapi.ArtifactIdentifier
import impactassessment.artifactconnector.jira.JiraArtifact
import artifactapi.IArtifact;


global CommandGateway commandGateway;
global IArtifactRegistry artifactRegistry;

//constraints for state open
rule "InsertQAConstraintsStateOpen"
	when
	    $a : IJamaArtifact(  )
		$wft : WorkflowTask( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId()) &&
		                        getType().getId().equals("Sub WP Execution") &&
		                        getAnyOneOutputByRole("ROLE_DOCUMENTATION") == null)
	then
        Map<String, String> constraints = new HashMap<>();
        //constraints.put("CheckJamaArtifactTypeIsFEAT", "Is the work-package type FEAT?");
        constraints.put("CheckJamaArtifactHasJiraKey", "Has the work-package a Jira Issue Key defined?");
        //constraints.put("CheckJamaArtifactJiraSyncVersion", "Is the Jira-sync-version of the Jama ticket correct (version 3)?");
        constraints.put("CheckJiraIssueClosed", "Is the Jira issue in state closed?");
        constraints.put("CheckWorkpackageLinkedToSRS", "Is the work-package linked to a SRS?");
        constraints.put("CheckWorkpackageSrsAreReleasedOrDeleted", "Are all linked SRS in status deleted or resolved?");
        constraints.put("CheckWorkpackageSrsHaveRelease", "Do have all linked SRS an active release?");
        constraints.put("CheckWorkpackageHasOnlySrsWithSssAppendedToThem", "Is every SRS correctly related to at least one SSS?");

        constraints.put("CheckLinkedSSSLinkedToSRS", "Are SSS linked to SRS?");

        commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
end

////constraints for state in-progress
//rule "InsertQAConstraintsStateInProgress"
//	when
//		$a : IJiraArtifact(  )
//        		$wft : WorkflowTask( getWorkflow().containsInputOrOutput($a.getKey()) &&
//        		                        getType().getId().equals("In Progress") &&
//							            getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
//	then
//        Map<String, String> constraints = new HashMap<>();
//        //constraints for Tasks and Sub-Taks
//        if ($a.getIssueType().getName().equals("Task") || $a.getIssueType().getName().equals("Sub-task")) {
//            constraints.put("CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?");
//            constraints.put("CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?");
//            constraints.put("CheckJiraIssueHasAssignee", "Has the Jira ticket an assignee?");
//            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
//        //constraints for Design Definitions
//        } else if ($a.getIssueType().getName().equals("Design Definition")){
//            constraints.put("CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?");
//            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
//        //constraints for Bugs
//        } else if ($a.getIssueType().getName().equals("Bug")){
//            // add nothing
//        }
//end
//
////constraints for state resolved
//rule "InsertQAConstraintsStateResolved"
//	when
//		$a : IJiraArtifact(  )
//        		$wft : WorkflowTask( getWorkflow().containsInputOrOutput($a.getKey()) &&
//        		                        getType().getId().equals("Resolved") &&
//							            getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
//	then
//        Map<String, String> constraints = new HashMap<>();
//		//constraints for Tasks and Sub-Taks
//		if ($a.getIssueType().getName().equals("Task") || $a.getIssueType().getName().equals("Sub-task")) {
//		    constraints.put("CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?");
//		    constraints.put("CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?");
//		    constraints.put("CheckJiraIssueRelatedToUnitTest", "Is the Jira ticket related to at least one Unit-Test?");
//		    constraints.put("CheckAllRelatedBugsClosed", "Are all related bugs closed?");
//            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
//		//constraints for Design Definitions
//		} else if ($a.getIssueType().getName().equals("Design Definition")){
//		    constraints.put("CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?");
//            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
//		//constraints for Bugs
//		} else if ($a.getIssueType().getName().equals("Bug")){
//		    constraints.put("CheckJiraIssueHasFixVersion", "Does the Bug have at least one FixVersion?");
//            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
//		}
//end



//-------------------------------------------------QAConstraints--------------------------------------------------------



rule "CheckJiraIssueBase"
	no-loop
	when
		$a : IJamaArtifact ( )
		$ct : ConstraintTrigger ( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId()) )
	then
end

rule "CheckJamaArtifactTypeIsFEAT" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckJamaArtifactTypeIsFEAT" )
											&& isAffectedBy($ct) )
	then
		boolean isFEAT = $a.getItemType() != null && $a.getItemType().equals("FEAT");
		Map<ResourceLink, Boolean> result = Map.of($a.convertToResourceLink(), isFEAT);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJamaArtifactHasJiraKey" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckJamaArtifactHasJiraKey" )
											&& isAffectedBy($ct) )
	then
		boolean hasJiraKey = $a.getStringValue("SYS_JIRA_KEY") != null;
		Map<ResourceLink, Boolean> result = Map.of($a.convertToResourceLink(), hasJiraKey);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJamaArtifactJiraSyncVersion" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckJamaArtifactJiraSyncVersion" )
											&& isAffectedBy($ct) )
	then
	    boolean hasCorrectSyncVersion = $a.getIntegerValue("SYS_JIRA_SYNC_VERSION") != null && $a.getIntegerValue("SYS_JIRA_SYNC_VERSION").equals(3);
		Map<ResourceLink, Boolean> result = Map.of($a.convertToResourceLink(), hasCorrectSyncVersion);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraIssueClosed" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckJiraIssueClosed" )
											&& isAffectedBy($ct) )
	then
	    String jiraKey = $a.getStringValue("SYS_JIRA_KEY");
	    ArtifactIdentifier ai = new ArtifactIdentifier(jiraKey, IJiraArtifact.class.getSimpleName());
	    Optional<IArtifact> opt = artifactRegistry.get(ai, $qac.getWorkflow().getId());
	    Map<ResourceLink, Boolean> result;
	    if (opt.isPresent()) {
	        IJiraArtifact jiraArt = (IJiraArtifact) opt.get();
	        System.out.println("Jira state: "+jiraArt.getStatus().getName());
	        boolean isClosed = jiraArt.getStatus().getName().equals("Done");
	        result = Map.of(jiraArt.convertToResourceLink(), isClosed);
	    } else {
	        result = Map.of($a.convertToResourceLink(), false);
	    }
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckWorkpackageLinkedToSRS" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckWorkpackageLinkedToSRS" )
											&& isAffectedBy($ct) )
	then
        List<IJamaArtifact> artifacts = $a.getDownstreamItems($qac.getWorkflowId());
        Map<ResourceLink, Boolean> result = new HashMap<>();
        for (IJamaArtifact artifact : artifacts) {
            if (artifact.getItemType() != null && artifact.getItemType().equals("SRS")) {
                result.put(artifact.convertToResourceLink(), true);
            }
        }
        if (result.size() == 0) {
            result.put($a.convertToResourceLink(), false);
        }
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckLinkedSSSLinkedToSRS" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckLinkedSSSLinkedToSRS" )
											&& isAffectedBy($ct) )
	then
        List<IJamaArtifact> artifacts = ((JamaArtifact)$a).getUpstreamItems($qac.getWorkflowId());
        Map<ResourceLink, Boolean> result = new HashMap<>();
        for (IJamaArtifact artifact : artifacts) {
            if (artifact.getItemType() != null && artifact.getItemType().equals("SSS")) {
                List<IJamaArtifact> sssDownstream = artifact.getDownstreamItems($qac.getWorkflowId());
                for (IJamaArtifact down : sssDownstream) {
                    if (down.getItemType() != null && down.getItemType().equals("SRS")) {
                        result.put(artifact.convertToResourceLink(), true);
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.put($a.convertToResourceLink(), false);
        }
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckWorkpackageSrsAreReleasedOrDeleted" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckWorkpackageSrsAreReleasedOrDeleted" )
											&& isAffectedBy($ct) )
	then
        List<IJamaArtifact> artifacts = $a.getDownstreamItems($qac.getWorkflowId());
        Map<ResourceLink, Boolean> result = new HashMap<>();
        for (IJamaArtifact artifact : artifacts) {
            if (artifact.getItemType() != null && artifact.getItemType().equals("SRS")) {
                String status = artifact.getStringValue("status") != null ? artifact.getStringValue("status") : "";
                if (status.toLowerCase().equals("released") || status.toLowerCase().equals("deleted")) {
                    result.put(artifact.convertToResourceLink(), true);
                } else {
                    result.put(artifact.convertToResourceLink(), false);
                }
            }
        }
        if (result.size() == 0) {
            result.put($a.convertToResourceLink(), false);
        }
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckWorkpackageSrsHaveRelease" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckWorkpackageSrsHaveRelease" )
											&& isAffectedBy($ct) )
	then
        List<IJamaArtifact> artifacts = $a.getDownstreamItems($qac.getWorkflowId());
        Map<ResourceLink, Boolean> result = new HashMap<>();
        for (IJamaArtifact artifact : artifacts) {
            if (artifact.getItemType() != null && artifact.getItemType().equals("SRS")) {
                String status = artifact.getStringValue("status") != null ? artifact.getStringValue("status") : "";
                IJamaRelease release = artifact.getJamaReleaseValue("release");
                if (!status.toLowerCase().equals("deleted") && release != null && release.isActive()) {
                    result.put(artifact.convertToResourceLink(), true);
                } else {
                    result.put(artifact.convertToResourceLink(), false);
                }
            }
        }
        if (result.size() == 0) {
            result.put($a.convertToResourceLink(), false);
        }
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckWorkpackageHasOnlySrsWithSssAppendedToThem" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
											&& getConstraintType().equals( "CheckWorkpackageHasOnlySrsWithSssAppendedToThem" )
											&& isAffectedBy($ct) )
	then
        List<IJamaArtifact> artifacts = $a.getDownstreamItems($qac.getWorkflowId());
        Map<ResourceLink, Boolean> result = new HashMap<>();
        for (IJamaArtifact artifact : artifacts) {
            if (artifact.getItemType() != null && artifact.getItemType().equals("SRS")) {
                JamaArtifact srs = (JamaArtifact) artifact;
                boolean srsHasSss = false;
                for (IJamaArtifact sss : srs.getUpstreamItems($qac.getWorkflowId())) {
                    if (sss.getItemType() != null && sss.getItemType().equals("SSS")) {
                        String status = sss.getStringValue("status") != null ? sss.getStringValue("status") : "";
                        if (!status.toLowerCase().equals("deleted")) {
                            result.put(sss.convertToResourceLink(), true);
                            srsHasSss = true;
                            break;
                        }
                    }
                }
                if (!srsHasSss) {
                    result.put(artifact.convertToResourceLink(), false);
                }
            }
        }
        if (result.size() == 0) {
            result.put($a.convertToResourceLink(), true); // because no SRS is present so no SRS violates the rule
        }
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

//rule "CheckJiraIssueRelatedToDesignDefinition" extends "CheckJiraIssueBase"
//	no-loop
//	when
//		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getArtifactIdentifier().getId())
//											&& getConstraintType().equals( "CheckJiraIssueRelatedToDesignDefinition" )
//											&& isAffectedBy($ct) )
//	then
//		boolean isRelatedToOne = true;
//		int n = 0;
//		Map<ResourceLink, Boolean> resources = new HashMap<>();
//		for (IJiraIssueLink link : $a.getIssueLinks()){
//			Optional<IJiraArtifact> p = link.getTargetIssue($qac.getWorkflowId(), $qac.getId());
//			if (p.isPresent() && (p.get().getIssueType().getName().equals("Design Definition"))){
//				n++;
//				resources.put(p.get().convertToResourceLink(), isRelatedToOne);
//				isRelatedToOne = false;
//			}
//		}
//		if (n == 0) {
//		    resources.put($a.convertToResourceLink(), false);
//		}
//		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
//end

//rule "CheckDesignDefinitionRelatedToRequirement" extends "CheckJiraIssueBase"
//	no-loop
//	when
//		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getKey())
//											&& getConstraintType().equals( "CheckDesignDefinitionRelatedToRequirement" )
//											&& isAffectedBy($ct) )
//	then
//		boolean isRelatedToOne = true;
//		int n = 0;
//		Map<ResourceLink, Boolean> resources = new HashMap<>();
//		for (IJiraIssueLink link : $a.getIssueLinks()){
//			Optional<IJiraArtifact> p = link.getTargetIssue($qac.getWorkflowId(), $qac.getId());
//			if (p.isPresent() && (p.get().getIssueType().getName().equals("Requirement"))){
//				n++;
//				if (link.getIssueLinkType().getName().equals("Realizes")){
//				    resources.put(p.get().convertToResourceLink(), isRelatedToOne);
//					isRelatedToOne = false;
//				} else {
//				    resources.put(p.get().convertToResourceLink(), false);
//				}
//			}
//		}
//		if (n == 0) {
//		    resources.put($a.convertToResourceLink(), false);
//		}
//		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
//end
//
//rule "CheckJiraIssueHasAssignee" extends "CheckJiraIssueBase"
//	no-loop
//	when
//		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getKey())
//											&& getConstraintType().equals( "CheckJiraIssueHasAssignee" )
//											&& isAffectedBy($ct) )
//	then
//		boolean hasAssignee = $a.getAssignee() != null;
//		Map<ResourceLink, Boolean> result = Map.of($a.convertToResourceLink(), hasAssignee);
//        commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
//end
//
//rule "CheckJiraIssueRelatedToUnitTest" extends "CheckJiraIssueBase"
//	no-loop
//	when
//		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getKey())
//											&& getConstraintType().equals( "CheckJiraIssueRelatedToUnitTest" )
//											&& isAffectedBy($ct) )
//	then
//		int n = 0;
//		Map<ResourceLink, Boolean> resources = new HashMap<>();
//		for (IJiraIssueLink link : $a.getIssueLinks()){
//			Optional<IJiraArtifact> p = link.getTargetIssue($qac.getWorkflowId(), $qac.getId());
//			if (p.isPresent() && (p.get().getIssueType().getName().equals("Unit Test"))){
//			    resources.put(p.get().convertToResourceLink(), true);
//				n++;
//			}
//		}
//		if (n == 0) {
//		    resources.put($a.convertToResourceLink(), false);
//		}
//		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
//end
//
//rule "CheckAllRelatedBugsClosed" extends "CheckJiraIssueBase"
//	no-loop
//	when
//		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getKey())
//											&& getConstraintType().equals( "CheckAllRelatedBugsClosed" )
//											&& isAffectedBy($ct) )
//	then
//		boolean relatedBug = false;
//		Map<ResourceLink, Boolean> resources = new HashMap<>();
//		for (IJiraIssueLink link : $a.getIssueLinks()){
//			Optional<IJiraArtifact> p = link.getTargetIssue($qac.getWorkflowId(), $qac.getId());
//			if (p.isPresent() && p.get().getIssueType().getName().equals("Bug") ){
//				if (p.get().getStatus().getName().equals("Closed")) {
//				    resources.put(p.get().convertToResourceLink(), true);
//				} else {
//				    resources.put(p.get().convertToResourceLink(), false);
//				}
//				relatedBug = true;
//			}
//		}
//		if (!relatedBug) {
//		    resources.put($a.convertToResourceLink(), true);
//		}
//		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
//end
//
//rule "CheckHazardIsMitigated" extends "CheckJiraIssueBase"
//	no-loop
//	when
//		$qac : RuleEngineBasedConstraint( getWorkflow().containsInputOrOutput($a.getKey())
//											&& getConstraintType().equals( "CheckHazardIsMitigated" )
//											&& isAffectedBy($ct) )
//	then
//		boolean isMitigated = false;
//		Map<ResourceLink, Boolean> resources = new HashMap<>();
//		for (IJiraIssueLink link : $a.getIssueLinks()){
//		    Optional<IJiraArtifact> p = link.getTargetIssue($qac.getWorkflowId(), $qac.getId());
//			if (p.isPresent() && (p.get().getIssueType().getName().equals("Design Definition"))){
//				if (link.getIssueLinkType().getName().equals("Mitigates")){
//					isMitigated = true;
//					resources.put(p.get().convertToResourceLink(), isMitigated);
//				}
//			}
//		}
//		if (!isMitigated) {
//		    resources.put($a.convertToResourceLink(), false);
//		}
//		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
//end

rule "RemoveConstraintTrigger"
	salience -1000
	when
		$ct : ConstraintTrigger()
	then
		delete($ct);
end