package rules;

import org.slf4j.Logger
import org.axonframework.commandhandling.gateway.CommandGateway

import impactassessment.passiveprocessengine.definition.DecisionNodeDefinition.States
import impactassessment.passiveprocessengine.instance.WorkflowInstance
import impactassessment.passiveprocessengine.instance.DecisionNodeInstance
import impactassessment.passiveprocessengine.definition.DecisionNodeDefinition
import impactassessment.passiveprocessengine.definition.TaskDefinition
import impactassessment.passiveprocessengine.instance.WorkflowTask
import impactassessment.passiveprocessengine.definition.TaskLifecycle.Events
import impactassessment.passiveprocessengine.instance.AbstractWorkflowInstanceObject
import impactassessment.passiveprocessengine.definition.WorkflowDefinition
import impactassessment.passiveprocessengine.workflows.DronologyWorkflow
import impactassessment.passiveprocessengine.instance.ResourceLink
import impactassessment.passiveprocessengine.instance.QACheckDocument

import impactassessment.api.CompleteDataflowCmd
import impactassessment.api.ActivateInBranchCmd
import impactassessment.api.ActivateOutBranchCmd
import impactassessment.api.ActivateInOutBranchCmd

import impactassessment.jiraartifact.IJiraArtifact
import impactassessment.jiraartifact.IJiraStatus

import java.util.List
import java.util.Set
import impactassessment.passiveprocessengine.instance.ResourceLink


global CommandGateway commandGateway;

rule "AddWPTicketAsInputToNewTasks"
    when // matches any inBranch for the Workflow waiting for input,
    	$a : IJiraArtifact(  )
        $dni : DecisionNodeInstance( getWorkflow().getId().equals($a.getKey()) &&
        							 getWorkflow().getWorkflowDefinition().getId().equals(DronologyWorkflow.WORKFLOW_TYPE) &&
									 state == DecisionNodeDefinition.States.PASSED_OUTBRANCH_CONDITIONS &&
									 !isActivationPropagationCompleted()
									 , $wfi : getWorkflow() )
									 	@watch ( state )
    then      // creates the task and adds the ticket as input
        commandGateway.send(new CompleteDataflowCmd($wfi.getId(), $dni.getId(), ResourceLink.of($a)));

end

rule "Open2InProgress-InBranchConditions"
    when
    	$a : IJiraArtifact( getStatus().getName().equals(DronologyWorkflow.TASK_STATE_IN_PROGRESS) )
        $task : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_OPEN) )
        						@watch ( outputState, lifecycleState )
        $dn : DecisionNodeInstance( getWorkflow().getId().equals($a.getKey()) &&
        							getWorkflow().getId().equals($task.getWorkflow().getId()) &&
        							getDefinition().getId().equals("open2inProgressOrResolved") &&
        							getInBranchIdForWorkflowTask($task) != null &&
        							!isTaskCompletionConditionsFullfilled()
        							, $wfi : getWorkflow() )
        $qacd : QACheckDocument( getWorkflow().getId().equals($a.getKey()) &&
                                   areConstraintsFulfilled() )
    then
        commandGateway.send(new ActivateInOutBranchCmd($wfi.getId(), $dn.getId(), $task.getId(), "inProgressIn"));
end

rule "InProgress2Resolved-InBranchConditions"
    when
    	$a : IJiraArtifact( getStatus().getName().equals("Resolved") )
        $task : WorkflowTask( getTaskType().getId().equals("In Progress"))
        						@watch ( outputState, lifecycleState )
        $dn : DecisionNodeInstance( getWorkflow().getId().equals($a.getKey()) &&
        							getWorkflow().getId().equals($task.getWorkflow().getId()) &&
        							getDefinition().getId().equals("inProgressToResolved") &&
        							getInBranchIdForWorkflowTask($task) != null &&
        							!isTaskCompletionConditionsFullfilled()
        							, $wfi : getWorkflow() )
        $qacd : QACheckDocument( getWorkflow().getId().equals($a.getKey()) &&
                                   areConstraintsFulfilled() )
    then
        commandGateway.send(new ActivateInOutBranchCmd($wfi.getId(), $dn.getId(), $task.getId(), "resolvedIn"));
end

rule "Open2Resolved-InBranchConditions"
    when
    	$a : IJiraArtifact( getStatus().getName().equals(DronologyWorkflow.TASK_STATE_RESOLVED) || getStatus().getName().equals("Closed") )
        $task : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_OPEN) )
        						@watch ( outputState, lifecycleState )
        $dn : DecisionNodeInstance( getWorkflow().getId().equals($a.getKey()) &&
        							getWorkflow().getId().equals($task.getWorkflow().getId()) &&
        							getDefinition().getId().equals("open2inProgressOrResolved") &&
        							getInBranchIdForWorkflowTask($task) != null &&
        							!isTaskCompletionConditionsFullfilled()
        							, $wfi : getWorkflow() )
        $qacd : QACheckDocument( getWorkflow().getId().equals($a.getKey()) &&
                                   areConstraintsFulfilled() )
    then
        commandGateway.send(new ActivateInOutBranchCmd($wfi.getId(), $dn.getId(), $task.getId(), "resolvedIn"));
end
