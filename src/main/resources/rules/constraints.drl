package rules;

import org.axonframework.commandhandling.gateway.CommandGateway

import impactassessment.model.definition.QACheckDocument
import impactassessment.model.workflowmodel.WorkflowTask
import impactassessment.model.workflowmodel.ResourceLink
import java.util.Optional
import impactassessment.model.definition.RuleEngineBasedConstraint
import java.time.Instant
import impactassessment.analytics.CorrelationTuple
import impactassessment.model.definition.ConstraintTrigger
import impactassessment.model.definition.DronologyWorkflow

import impactassessment.api.AddQAConstraintCmd
import impactassessment.api.AddResourceToConstraintCmd
import java.util.concurrent.TimeUnit
import java.util.List
import java.util.ArrayList

import impactassessment.jiraartifact.IJiraArtifact
import impactassessment.jiraartifact.IJiraIssueLink
import impactassessment.jiraartifact.IJiraArtifactService
import impactassessment.kiesession.KieSessionUtils

global CommandGateway commandGateway;
global IJiraArtifactService artifactService;

//constraints for state open
rule "InsertQAConstraintsStateOpen"
	when
		$wft : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_OPEN) &&
		                        getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null)
	then
        Optional opt = $wft.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
        WorkflowTask.ArtifactOutput aOut = (WorkflowTask.ArtifactOutput) opt.orElse(null);

        //constraints for Tasks and Sub-Taks
        if (aOut != null && (((ResourceLink) aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink) aOut.getArtifact()).getAs().equals("Sub-task"))) {
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_OPEN,"CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?"));
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_OPEN, "CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?"));
        //constraints for Design Definitions
        } else if (aOut != null && ((ResourceLink) aOut.getArtifact()).getAs().equals("Design Definition")) {
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_OPEN, "CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?"));
        //constraints for Bugs
        } else if (aOut != null && ((ResourceLink) aOut.getArtifact()).getAs().equals("Bug")) {
            // add nothing
        //constraints for Hazards
        } else if (aOut != null && ((ResourceLink) aOut.getArtifact()).getAs().equals("Hazard")) {
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_OPEN, "CheckHazardIsMitigated", "Is the hazard mitigated by a Design Definition?"));
        }
end

//constraints for state in-progress
rule "InsertQAConstraintsStateInProgress"
	when
		$wft : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_IN_PROGRESS) &&
							  getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
	    Optional opt = $wft.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
        WorkflowTask.ArtifactOutput aOut = (WorkflowTask.ArtifactOutput) opt.orElse(null);

        //constraints for Tasks and Sub-Taks
        if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_IN_PROGRESS, "CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?"));
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_IN_PROGRESS, "CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?"));
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_IN_PROGRESS, "CheckJiraIssueHasAssignee", "Has the Jira ticket an assignee?"));
        //constraints for Design Definitions
        } else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
            commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_IN_PROGRESS, "CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?"));
        //constraints for Bugs
        } else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
            // add nothing
        }
end

//constraints for state resolved
rule "InsertQAConstraintsStateResolved"
	when
		$wft : WorkflowTask ( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_RESOLVED) &&
							   getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
		Optional opt = $wft.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
		WorkflowTask.ArtifactOutput aOut = (WorkflowTask.ArtifactOutput) opt.orElse(null);

		//constraints for Tasks and Sub-Taks
		if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
		    commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_RESOLVED, "CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?"));
		    commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_RESOLVED, "CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?"));
		    commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_RESOLVED, "CheckJiraIssueRelatedToUnitTest", "Is the Jira ticket related to at least one Unit-Test?"));
		    commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_RESOLVED, "CheckAllRelatedBugsClosed", "Are all related bugs closed?"));
		//constraints for Design Definitions
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
		    commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_RESOLVED, "CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?"));
		//constraints for Bugs
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
		    commandGateway.send(new AddQAConstraintCmd($wft.getWorkflow().getId(), $wft.getId(), DronologyWorkflow.TASK_STATE_RESOLVED, "CheckJiraIssueHasFixVersion", "Does the Bug have at least one FixVersion?"));
		}
end



//-------------------------------------------------QAConstraints--------------------------------------------------------



rule "CheckJiraIssueBase"
	no-loop
	when
		$a : IJiraArtifact ( )
		$ct : ConstraintTrigger ( getWorkflow().getId().equals($a.getKey()) )
	then
end

rule "CheckJiraIssueHasFixVersion" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueHasFixVersion" )
											&& isAffectedBy($ct) )
	then
		boolean hasFixVersion = $a.getFixVersions().iterator().hasNext();
		commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), hasFixVersion, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraIssueRelatedToDesignDefinition" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueRelatedToDesignDefinition" )
											&& isAffectedBy($ct) )
	then
		boolean isRelatedToOne = true;
		int n = 0;
		for (IJiraIssueLink link : $a.getIssueLinks()){ // for (MockRelation r : $a.getRelationsIncoming()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey()); // IArtifact p = r.getSource();
			if ((p != null) && (p.getIssueType().getName().equals("Design Definition"))){
				n++;
                commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), isRelatedToOne, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
				isRelatedToOne = false;
			}
		}
		if (n == 0) {
            commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), false, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
		}
end

rule "CheckDesignDefinitionRelatedToRequirement" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckDesignDefinitionRelatedToRequirement" )
											&& isAffectedBy($ct) )
	then
		boolean isRelatedToOne = true;
		int n = 0;
		for (IJiraIssueLink link : $a.getIssueLinks()){ // for (MockRelation r : $a.getRelationsOutgoing()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey()); // IArtifact p = r.getDestination();
			if ((p != null) && (p.getIssueType().getName().equals("Requirement"))){
				n++;
				if (link.getIssueLinkType().getName().equals("Realizes")){
                    commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), isRelatedToOne, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
					isRelatedToOne = false;
				} else {
                    commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), false, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
				}
			}
		}
		if (n == 0) {
            commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), false, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
		}
end

rule "CheckJiraIssueHasAssignee" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueHasAssignee" )
											&& isAffectedBy($ct) )
	then
		boolean hasAssignee = $a.getAssignee() != null;
        commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), hasAssignee, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraIssueRelatedToUnitTest" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueRelatedToUnitTest" )
											&& isAffectedBy($ct) )
	then
		int n = 0;
		for (IJiraIssueLink link : $a.getIssueLinks()){ // for (MockRelation r : $a.getRelationsOutgoing()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey()); // IArtifact p = (IArtifact) r.getDestination();
			if ((p != null) && (p.getIssueType().getName().equals("Unit Test"))){
                commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), true, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
				n++;
			}
		}
		if (n == 0) {
            commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), false, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
		}
end

rule "CheckAllRelatedBugsClosed" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckAllRelatedBugsClosed" )
											&& isAffectedBy($ct) )
	then
		boolean relatedBug = false;
		for (IJiraIssueLink link : $a.getIssueLinks()){ // for (MockRelation r : $a.getRelationsOutgoing()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey()); // IArtifact p = (IArtifact) r.getDestination();
			if ((p != null) && p.getIssueType().getName().equals("Bug") ){
				if (p.getStatus().getName().equals("Closed")) {
                    commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), true, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
				} else {
                    commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), false, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
				}
				relatedBug = true;
			}
		}
		if (!relatedBug) {
            commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), true, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
		}
end

rule "CheckHazardIsMitigated" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckHazardIsMitigated" )
											&& isAffectedBy($ct) )
	then
		boolean isMitigated = false;
		for (IJiraIssueLink link : $a.getIssueLinks()){ // for (MockRelation r : $a.getRelationsIncoming()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey()); // IArtifact p = r.getSource();
			if ((p != null) && (p.getIssueType().getName().equals("Design Definition"))){
				if (link.getIssueLinkType().getName().equals("Mitigates")){
					isMitigated = true;
                    commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), isMitigated, ResourceLink.of(p), $ct.getRequestCorrelation(), Instant.now()));
				}
			}
		}
		if (!isMitigated) {
            commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), false, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
		}
end

rule "RemoveConstraintTrigger"
	salience -1000
	when
		$ct : ConstraintTrigger()
	then
		delete($ct);
end