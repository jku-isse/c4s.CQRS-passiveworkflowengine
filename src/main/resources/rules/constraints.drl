package rules;

import org.axonframework.commandhandling.gateway.CommandGateway

import impactassessment.passiveprocessengine.definition.QACheckDocument
import impactassessment.passiveprocessengine.workflowmodel.WorkflowTask
import impactassessment.passiveprocessengine.workflowmodel.ResourceLink
import java.util.Optional
import impactassessment.passiveprocessengine.definition.RuleEngineBasedConstraint
import java.time.Instant
import impactassessment.passiveprocessengine.definition.CorrelationTuple
import impactassessment.passiveprocessengine.definition.ConstraintTrigger
import impactassessment.passiveprocessengine.workflows.DronologyWorkflow

import impactassessment.api.AddQAConstraintCmd
import impactassessment.api.AddResourceToConstraintCmd
import impactassessment.api.AddResourcesToConstraintCmd
import java.util.concurrent.TimeUnit
import java.util.List
import java.util.ArrayList

import impactassessment.jiraartifact.IJiraArtifact
import impactassessment.jiraartifact.IJiraIssueLink
import impactassessment.jiraartifact.IJiraArtifactService
import impactassessment.kiesession.KieSessionUtils
import java.util.Map
import java.util.HashMap
import impactassessment.api.AddConstraintsCmd

global CommandGateway commandGateway;
global IJiraArtifactService artifactService;

//constraints for state open
rule "InsertQAConstraintsStateOpen"
	when
		$wft : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_OPEN) &&
		                        getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null)
	then
        Optional opt = $wft.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
        WorkflowTask.ArtifactOutput aOut = (WorkflowTask.ArtifactOutput) opt.orElse(null);
        Map<String, String> constraints = new HashMap<>();
        //constraints for Tasks and Sub-Taks
        if (aOut != null && (((ResourceLink) aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink) aOut.getArtifact()).getAs().equals("Sub-task"))) {
            constraints.put("CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?");
            constraints.put("CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
        //constraints for Design Definitions
        } else if (aOut != null && ((ResourceLink) aOut.getArtifact()).getAs().equals("Design Definition")) {
            constraints.put("CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
        //constraints for Bugs
        } else if (aOut != null && ((ResourceLink) aOut.getArtifact()).getAs().equals("Bug")) {
            // add nothing
        //constraints for Hazards
        } else if (aOut != null && ((ResourceLink) aOut.getArtifact()).getAs().equals("Hazard")) {
            constraints.put("CheckHazardIsMitigated", "Is the hazard mitigated by a Design Definition?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
        }
end

//constraints for state in-progress
rule "InsertQAConstraintsStateInProgress"
	when
		$wft : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_IN_PROGRESS) &&
							  getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
	    Optional opt = $wft.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
        WorkflowTask.ArtifactOutput aOut = (WorkflowTask.ArtifactOutput) opt.orElse(null);
        Map<String, String> constraints = new HashMap<>();
        //constraints for Tasks and Sub-Taks
        if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
            constraints.put("CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?");
            constraints.put("CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?");
            constraints.put("CheckJiraIssueHasAssignee", "Has the Jira ticket an assignee?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
        //constraints for Design Definitions
        } else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
            constraints.put("CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
        //constraints for Bugs
        } else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
            // add nothing
        }
end

//constraints for state resolved
rule "InsertQAConstraintsStateResolved"
	when
		$wft : WorkflowTask ( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_RESOLVED) &&
							   getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
		Optional opt = $wft.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
		WorkflowTask.ArtifactOutput aOut = (WorkflowTask.ArtifactOutput) opt.orElse(null);
        Map<String, String> constraints = new HashMap<>();
		//constraints for Tasks and Sub-Taks
		if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
		    constraints.put("CheckJiraIssueHasFixVersion", "Does the Jira ticket have at least one FixVersion?");
		    constraints.put("CheckJiraIssueRelatedToDesignDefinition", "Is the Jira ticket related to exactly one Design Definition?");
		    constraints.put("CheckJiraIssueRelatedToUnitTest", "Is the Jira ticket related to at least one Unit-Test?");
		    constraints.put("CheckAllRelatedBugsClosed", "Are all related bugs closed?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
		//constraints for Design Definitions
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
		    constraints.put("CheckDesignDefinitionRelatedToRequirement", "Does the ticket realize exactly one Requirement?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
		//constraints for Bugs
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
		    constraints.put("CheckJiraIssueHasFixVersion", "Does the Bug have at least one FixVersion?");
            commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
		}
end



//-------------------------------------------------QAConstraints--------------------------------------------------------



rule "CheckJiraIssueBase"
	no-loop
	when
		$a : IJiraArtifact ( )
		$ct : ConstraintTrigger ( getWorkflow().getId().equals($a.getKey()) )
	then
end

rule "CheckJiraIssueHasFixVersion" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueHasFixVersion" )
											&& isAffectedBy($ct) )
	then
		boolean hasFixVersion = $a.getFixVersions().iterator().hasNext();
		commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), hasFixVersion, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraIssueRelatedToDesignDefinition" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueRelatedToDesignDefinition" )
											&& isAffectedBy($ct) )
	then
		boolean isRelatedToOne = true;
		int n = 0;
		Map<ResourceLink, Boolean> resources = new HashMap<>();
		for (IJiraIssueLink link : $a.getIssueLinks()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey());
			if ((p != null) && (p.getIssueType().getName().equals("Design Definition"))){
				n++;
				resources.put(ResourceLink.of(p), isRelatedToOne);
				isRelatedToOne = false;
			}
		}
		if (n == 0) {
		    resources.put(ResourceLink.of($a), false);
		}
		commandGateway.send(new AddResourcesToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckDesignDefinitionRelatedToRequirement" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckDesignDefinitionRelatedToRequirement" )
											&& isAffectedBy($ct) )
	then
		boolean isRelatedToOne = true;
		int n = 0;
		Map<ResourceLink, Boolean> resources = new HashMap<>();
		for (IJiraIssueLink link : $a.getIssueLinks()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey());
			if ((p != null) && (p.getIssueType().getName().equals("Requirement"))){
				n++;
				if (link.getIssueLinkType().getName().equals("Realizes")){
				    resources.put(ResourceLink.of(p), isRelatedToOne);
					isRelatedToOne = false;
				} else {
				    resources.put(ResourceLink.of(p), false);
				}
			}
		}
		if (n == 0) {
		    resources.put(ResourceLink.of($a), false);
		}
		commandGateway.send(new AddResourcesToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraIssueHasAssignee" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueHasAssignee" )
											&& isAffectedBy($ct) )
	then
		boolean hasAssignee = $a.getAssignee() != null;
        commandGateway.send(new AddResourceToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), hasAssignee, ResourceLink.of($a), $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraIssueRelatedToUnitTest" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckJiraIssueRelatedToUnitTest" )
											&& isAffectedBy($ct) )
	then
		int n = 0;
		Map<ResourceLink, Boolean> resources = new HashMap<>();
		for (IJiraIssueLink link : $a.getIssueLinks()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey());
			if ((p != null) && (p.getIssueType().getName().equals("Unit Test"))){
			    resources.put(ResourceLink.of(p), true);
				n++;
			}
		}
		if (n == 0) {
		    resources.put(ResourceLink.of($a), false);
		}
		commandGateway.send(new AddResourcesToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckAllRelatedBugsClosed" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckAllRelatedBugsClosed" )
											&& isAffectedBy($ct) )
	then
		boolean relatedBug = false;
		Map<ResourceLink, Boolean> resources = new HashMap<>();
		for (IJiraIssueLink link : $a.getIssueLinks()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey());
			if ((p != null) && p.getIssueType().getName().equals("Bug") ){
				if (p.getStatus().getName().equals("Closed")) {
				    resources.put(ResourceLink.of(p), true);
				} else {
				    resources.put(ResourceLink.of(p), false);
				}
				relatedBug = true;
			}
		}
		if (!relatedBug) {
		    resources.put(ResourceLink.of($a), true);
		}
		commandGateway.send(new AddResourcesToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckHazardIsMitigated" extends "CheckJiraIssueBase"
	no-loop
	when
		$qac : RuleEngineBasedConstraint( getWorkflow().getId().equals($a.getKey())
											&& getConstraintType().equals( "CheckHazardIsMitigated" )
											&& isAffectedBy($ct) )
	then
		boolean isMitigated = false;
		Map<ResourceLink, Boolean> resources = new HashMap<>();
		for (IJiraIssueLink link : $a.getIssueLinks()){
			IJiraArtifact p = artifactService.get(link.getTargetIssueKey());
			if ((p != null) && (p.getIssueType().getName().equals("Design Definition"))){
				if (link.getIssueLinkType().getName().equals("Mitigates")){
					isMitigated = true;
					resources.put(ResourceLink.of(p), isMitigated);
				}
			}
		}
		if (!isMitigated) {
		    resources.put(ResourceLink.of($a), false);
		}
		commandGateway.send(new AddResourcesToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), resources, $ct.getRequestCorrelation(), Instant.now()));
end

rule "RemoveConstraintTrigger"
	salience -1000
	when
		$ct : ConstraintTrigger()
	then
		delete($ct);
end