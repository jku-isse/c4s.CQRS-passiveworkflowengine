{
  "steps": [
    {
      "inDNDid": "0",
      "outDNDid": "2",
      "input": {
        "story": "azure_workitem"
      },
      "output": {
        "cscSubtask": "azure_workitem",
        "sucSubtask": "azure_workitem",
        "mmfSubtask": "azure_workitem"
      },
      "ioMapping": {
        "cscSubtask": "self.in_story-\u003eany()\n-\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Child\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.title.startsWith(\u0027CreateOrRefineCSC\u0027))\n-\u003easSet()\n-\u003esymmetricDifference(self.out_cscSubtask)\n-\u003esize() \u003d 0",
        "sucSubtask": "self.in_story-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Child\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.title.startsWith(\u0027RefineToSUC\u0027))\n -\u003easSet()\n-\u003esymmetricDifference(self.out_sucSubtask)\n-\u003esize() \u003d 0",
        "mmfSubtask": "self.in_story-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Child\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.title.startsWith(\u0027WriteOrReviseMMF\u0027))\n -\u003easSet()\n-\u003esymmetricDifference(self.out_mmfSubtask)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_story-\u003esize() \u003d 1 \nand \nself.in_story\n-\u003eforAll(issue | issue.workItemType.name \u003d \u0027Story\u0027) ",
        "POSTCONDITION": "self.out_mmfSubtask-\u003esize() \u003e 0 \nand \nself.out_sucSubtask-\u003esize() \u003e 0 \nand \nself.out_cscSubtask-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.in_story\n-\u003eany()-\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name\u003d\u0027Predecessor\u0027)\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.workItemType.name \u003d \u0027Change Request\u0027) \n-\u003esize() \u003e 0",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "ProcessTraceToSR",
          "description": "Each Process (story) must trace to at least one Stakeholder Request (Change Request) via a \u0027Predecessor\u0027 link."
        }
      ],
      "specOrderIndex": 1,
      "_type": "Step",
      "code": "PrepareProcess"
    },
    {
      "inDNDid": "2",
      "outDNDid": "3",
      "input": {
        "mmfSubtask": "azure_workitem"
      },
      "output": {
        "buc": "azure_workitem",
        "mmf": "azure_workitem"
      },
      "ioMapping": {
        "buc": "self.in_mmfSubtask-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.workItemType.name \u003d \u0027BUC\u0027)\n-\u003easSet()\n-\u003esymmetricDifference(self.out_buc)\n-\u003esize() \u003d 0",
        "mmf": "self.in_mmfSubtask-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.workItemType.name \u003d\u0027MMF\u0027)\n-\u003easSet()\n-\u003esymmetricDifference(self.out_mmf)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_mmfSubtask-\u003esize() \u003e 0",
        "POSTCONDITION": "self.out_mmf-\u003esize() \u003e 0 \nand \nself.out_buc-\u003esize() \u003e 0\nand \nself.in_mmfSubtask.state.name\u003d\u0027Closed\u0027"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_mmf\n-\u003eforAll( mmf1 | mmf1.relatedItems\n -\u003eselect(link3 | link3.linkType.name.equalsIgnoreCase(\u0027Predecessor\u0027))\n -\u003ecollect(link4 : \u003croot/types/workitem_link\u003e | link4.linkTo)\n -\u003eselect( ref2 | ref2.workItemType.name \u003d \u0027BUC\u0027)\n -\u003easSet()\n -\u003esize() \u003e 0)",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "MMFtraceToBUC",
          "description": "Each linked MMF must trace to at least one Business Use Case (BUC)."
        },
        {
          "arlRule": "self.out_mmf\n-\u003eforAll(mmf | mmf.relatedItems\n -\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Predecessor\u0027))\n -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n -\u003eselect(refitem | refitem.workItemType.name.equalsIgnoreCase(\u0027Change Request\u0027) )\n -\u003eforAll(cr : \u003croot/types/azure_workitem\u003e | cr.relatedItems\n  -\u003eselect(link3 | link3.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n  -\u003ecollect(link4 : \u003croot/types/workitem_link\u003e | link4.linkTo)\n  -\u003eselect(refitem2 | refitem2.workItemType.name.equalsIgnoreCase(\u0027BUC\u0027) )\n  -\u003easSet()\n -\u003esize() \u003e 0)\n)",
          "specOrderIndex": 2,
          "_type": "QAConstraint",
          "code": "SRtraceToBUC",
          "description": "Each SR linked via an MMF must trace to at least one  Business Use Case (BUC)."
        },
        {
          "arlRule": "self.out_mmf\n-\u003eforAll( mmf1 | mmf1.relatedItems\n -\u003eselect(link3 | link3.linkType.name.equalsIgnoreCase(\u0027Predecessor\u0027))\n -\u003ecollect(link4 : \u003croot/types/workitem_link\u003e | link4.linkTo)\n -\u003eselect( ref2 | ref2.workItemType.name \u003d \u0027Change Request\u0027)\n -\u003easSet()\n -\u003esize() \u003e 0)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "MMFtraceToSR",
          "description": "Each linked MMF must trace to at least one Stakeholder Request (SR)."
        }
      ],
      "specOrderIndex": 2,
      "_type": "Step",
      "code": "WriteOrReviseMMF"
    },
    {
      "inDNDid": "3",
      "outDNDid": "4",
      "input": {
        "sucSubtask": "azure_workitem"
      },
      "output": {
        "suc": "azure_workitem"
      },
      "ioMapping": {
        "suc": "self.in_sucSubtask-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.workItemType.name \u003d \u0027SUC\u0027)\n-\u003easSet()\n-\u003esymmetricDifference(self.out_suc)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_sucSubtask-\u003esize() \u003e 0",
        "POSTCONDITION": "self.in_sucSubtask\n-\u003eforAll(task |\ntask.state.name \u003d \u0027Closed\u0027)\nand \nself.out_suc-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": " self.out_suc-\u003esize() \u003e 0\nand\nself.out_suc-\u003eforAll( suc1 | \n suc1.relatedItems\n -\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Predecessor\u0027))\n -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n -\u003eselect( ref | ref.workItemType.name \u003d \u0027BUC\u0027)\n -\u003easSet()\n -\u003esize() \u003e 0\nor \nsuc1.relatedItems\n -\u003eselect(link3 | link3.linkType.name.equalsIgnoreCase(\u0027Parent\u0027))\n -\u003ecollect(link4 : \u003croot/types/workitem_link\u003e | link4.linkTo)\n -\u003eselect( ref2 | ref2.workItemType.name \u003d \u0027SUC\u0027)\n -\u003easSet()\n -\u003esize() \u003e 0)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "SUCtraceToSUCorBUC",
          "description": "Each SUC must trace to at least one (parent) System Use Case (SUC) or a Business Use Case (BUC)"
        },
        {
          "arlRule": "self.in_sucSubtask-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.workItemType.name \u003c\u003e \u0027SUC\u0027)\n-\u003easSet()\n-\u003esize() \u003d 0",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "OnlyTraceToSUCs",
          "description": "No engineering artifacts other than SUCs may be traced to."
        }
      ],
      "specOrderIndex": 3,
      "_type": "Step",
      "code": "RefineToSuc"
    },
    {
      "inDNDid": "4",
      "outDNDid": "1",
      "input": {
        "cscSubtask": "azure_workitem"
      },
      "output": {
        "csc": "azure_workitem"
      },
      "ioMapping": {
        "csc": "self.in_cscSubtask-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect( ref | ref.workItemType.name \u003d \u0027Feature\u0027)\n-\u003easSet()\n-\u003esymmetricDifference(self.out_csc)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_cscSubtask-\u003esize() \u003e 0",
        "POSTCONDITION": "self.out_csc-\u003esize() \u003e 0\nand\nself.in_cscSubtask\n-\u003eforAll(task |\ntask.state.name \u003d \u0027Closed\u0027)"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_csc\n-\u003eforAll( suc2 | suc2.relatedItems\n -\u003eselect(link3 | link3.linkType.name.equalsIgnoreCase(\u0027Predecessor\u0027))\n -\u003ecollect(link4 : \u003croot/types/workitem_link\u003e | link4.linkTo)\n -\u003eselect( ref2 | ref2.workItemType.name \u003d \u0027SUC\u0027)\n -\u003easSet()\n -\u003esize() \u003e 0)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "CSCtraceToSUC",
          "description": "Each CSC must trace to at least one System Use Case (SUC) or one of its children (SUC) via a \u0027realizes\u0027 link."
        }
      ],
      "specOrderIndex": 4,
      "_type": "Step",
      "code": "CreateOrRefineCSC"
    }
  ],
  "dns": [
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "SIELA-azure",
          "fromParam": "story",
          "toStep": "PrepareProcess",
          "toParam": "story"
        }
      ],
      "_type": "DecisionNode",
      "code": "0"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "RefineToSuc",
          "fromParam": "suc",
          "toStep": "SIELA-azure",
          "toParam": "suc"
        },
        {
          "fromStep": "CreateOrRefineCSC",
          "fromParam": "csc",
          "toStep": "SIELA-azure",
          "toParam": "csc"
        },
        {
          "fromStep": "WriteOrReviseMMF",
          "fromParam": "mmf",
          "toStep": "SIELA-azure",
          "toParam": "mmf"
        },
        {
          "fromStep": "WriteOrReviseMMF",
          "fromParam": "buc",
          "toStep": "SIELA-azure",
          "toParam": "buc"
        }
      ],
      "_type": "DecisionNode",
      "code": "1"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareProcess",
          "fromParam": "mmfSubtask",
          "toStep": "WriteOrReviseMMF",
          "toParam": "mmfSubtask"
        }
      ],
      "_type": "DecisionNode",
      "code": "2"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareProcess",
          "fromParam": "sucSubtask",
          "toStep": "RefineToSuc",
          "toParam": "sucSubtask"
        }
      ],
      "_type": "DecisionNode",
      "code": "3"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareProcess",
          "fromParam": "cscSubtask",
          "toStep": "CreateOrRefineCSC",
          "toParam": "cscSubtask"
        }
      ],
      "_type": "DecisionNode",
      "code": "4"
    }
  ],
  "prematureStepConditions": {},
  "input": {
    "story": "azure_workitem"
  },
  "output": {
    "suc": "azure_workitem",
    "buc": "azure_workitem",
    "csc": "azure_workitem",
    "mmf": "azure_workitem"
  },
  "ioMapping": {},
  "conditions": {},
  "qaConstraints": [],
  "specOrderIndex": 0,
  "_type": "Process",
  "code": "SIELA-azure"
}