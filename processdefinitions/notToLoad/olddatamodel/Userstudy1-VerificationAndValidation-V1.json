{
  "steps": [
    {
      "inDNDid": "0",
      "outDNDid": "2",
      "input": {
        "CR": "azure_workitem"
      },
      "output": {
        "SWPP": "azure_workitem",
        "FuncSpec": "azure_workitem",
        "SRS": "azure_workitem"
      },
      "ioMapping": {
        "SWPP": "self.in_CR-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect(refitem | refitem.title.startsWith(\u0027SPP\u0027) )\n-\u003easSet()\n-\u003esymmetricDifference(self.out_SWPP)\n -\u003esize() \u003d 0\n\n  ",
        "SRS": "self.in_CR-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Affects\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect(refitem | refitem.workItemType.name.equalsIgnoreCase(\u0027Requirement\u0027) )\n-\u003easSet()\n-\u003esymmetricDifference(self.out_SRS)\n -\u003esize() \u003d 0\n\n  ",
        "FuncSpec": "self.in_CR-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Affects\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect(refitem | refitem.workItemType.name.equalsIgnoreCase(\u0027Requirement\u0027) )\n-\u003easSet()\n-\u003ecollect(req : \u003croot/types/azure_workitem\u003e | req.relatedItems\n    -\u003eselect(link3 |  link3.linkType.name.equalsIgnoreCase(\u0027Successor\u0027))\n     -\u003ecollect(link4 : \u003croot/types/workitem_link\u003e | link4.linkTo)\n     -\u003eselect(refitem2 | refitem2.workItemType.name.equalsIgnoreCase(\u0027Functional Specification\u0027) )\n    -\u003eany())\n-\u003easSet()\n-\u003eselect(fs : \u003croot/types/azure_workitem\u003e | fs.isDefined()) \n-\u003esymmetricDifference(self.out_FuncSpec)\n -\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_CR\n-\u003eforAll(issue | issue.workItemType.name \u003d \u0027Change Request\u0027) \nand self.in_CR-\u003esize() \u003d 1 ",
        "POSTCONDITION": "self.out_SRS-\u003esize() \u003e 0\nand\nself.out_FuncSpec-\u003esize() \u003e 0\nand\nself.out_SWPP-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_FuncSpec-\u003esize() \u003e 0\nand\nself.out_FuncSpec\n-\u003eforAll(fs | fs.relatedItems\n-\u003eselect(link |  link.linkType.name.equalsIgnoreCase(\u0027Successor\u0027) )\n     -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n     -\u003eexists(refitem : \u003croot/types/azure_workitem\u003e | \nrefitem.workItemType.name.equalsIgnoreCase(\u0027Review\u0027)\n))",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "FuncSpecHasReview",
          "description": "Each \u0027released\u0027 Function Specification has a Review linked as \u0027Successor\u0027."
        }
      ],
      "specOrderIndex": 1,
      "_type": "Step",
      "code": "PrepareVandV"
    },
    {
      "inDNDid": "2",
      "outDNDid": "3",
      "input": {
        "SWPP": "azure_workitem",
        "SRS": "azure_workitem",
        "FuncSpec": "azure_workitem",
        "CR": "azure_workitem"
      },
      "output": {
        "TestPlan": "azure_workitem"
      },
      "ioMapping": {
        "TestPlan": "self.in_CR-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect(refitem | refitem.title.startsWith(\u0027TP\u0027) )\n-\u003easSet()\n-\u003esymmetricDifference(self.out_TestPlan)\n -\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_FuncSpec-\u003esize() \u003e 0\nand\nself.in_SRS-\u003esize() \u003e0\nand \nself.in_SWPP-\u003esize() \u003e 0\nand \nself.in_CR-\u003esize() \u003d 1\nand\nself.in_FuncSpec\n-\u003eforAll(fs2 | fs2.state.name \u003d \u0027Released\u0027)\nand\nself.in_SWPP\n-\u003eforAll(swpp | swpp.state.name \u003d \u0027Released\u0027)\nand\nself.in_SRS\n-\u003eforAll(srs | srs.state.name \u003d \u0027Released\u0027)\nand\nself.in_FuncSpec\n-\u003eforAll(fs | fs.relatedItems\n-\u003eselect(link |  link.linkType.name.equalsIgnoreCase(\u0027Successor\u0027) )\n     -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n     -\u003eexists(refitem : \u003croot/types/azure_workitem\u003e | \nrefitem.workItemType.name.equalsIgnoreCase(\u0027Review\u0027)\n))",
        "POSTCONDITION": "self.out_TestPlan-\u003esize() \u003e 0\nand\nself.out_TestPlan\n-\u003eforAll(tp | tp.state.name \u003d \u0027Ready For Review\u0027)"
      },
      "qaConstraints": [
        {
          "arlRule": "self.in_FuncSpec-\u003esize() \u003e 0\nand\nself.in_FuncSpec\n-\u003eforAll(fs | fs.relatedItems\n-\u003eselect(link |  link.linkType.name.equalsIgnoreCase(\u0027Related\u0027) )\n     -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n     -\u003eexists(refitem | \nself.out_TestPlan-\u003eincludes(refitem)\n))",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "FuncSpecTracesToTestPlan",
          "description": "Each FuncSpec is traced to one of the ChangeRequest\u0027s TestPlans"
        },
        {
          "arlRule": "self.out_TestPlan-\u003esize() \u003e 0\nand\nself.out_TestPlan\n-\u003eforAll(tp | tp.relatedItems\n -\u003eselect(link |  link.linkType.name.equalsIgnoreCase(\u0027Related\u0027))\n     -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n     -\u003eexists(refitem |  self.in_FuncSpec-\u003eincludes(refitem)\n))",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "TestPlanTracesToFuncSpec",
          "description": "Each TestPlan traced to at least on of the ChangeRequest\u0027s FuncSpecs."
        }
      ],
      "specOrderIndex": 2,
      "_type": "Step",
      "code": "CreateOrUpdateTestPlan"
    },
    {
      "inDNDid": "3",
      "outDNDid": "1",
      "input": {
        "TestPlan": "azure_workitem",
        "CR": "azure_workitem"
      },
      "output": {},
      "ioMapping": {},
      "conditions": {
        "PRECONDITION": "self.in_TestPlan-\u003esize() \u003e 0 and self.in_CR-\u003esize() \u003e 0",
        "POSTCONDITION": "self.in_TestPlan-\u003esize() \u003e 0\nand\nself.in_TestPlan\n-\u003eforAll(plan | \nplan.state.name\u003d\u0027Released\u0027\n)"
      },
      "qaConstraints": [],
      "specOrderIndex": 3,
      "_type": "Step",
      "code": "ReviewTestPlan"
    }
  ],
  "dns": [
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "VerificationValidation",
          "fromParam": "CR",
          "toStep": "PrepareVandV",
          "toParam": "CR"
        }
      ],
      "_type": "DecisionNode",
      "code": "0"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "CreateOrUpdateTestPlan",
          "fromParam": "TestPlan",
          "toStep": "VerificationValidation",
          "toParam": "TestPlan"
        },
        {
          "fromStep": "VerificationValidation",
          "fromParam": "CR",
          "toStep": "VerificationValidation",
          "toParam": "CR"
        }
      ],
      "_type": "DecisionNode",
      "code": "1"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareVandV",
          "fromParam": "SRS",
          "toStep": "CreateOrUpdateTestPlan",
          "toParam": "SRS"
        },
        {
          "fromStep": "PrepareVandV",
          "fromParam": "FuncSpec",
          "toStep": "CreateOrUpdateTestPlan",
          "toParam": "FuncSpec"
        },
        {
          "fromStep": "VerificationValidation",
          "fromParam": "CR",
          "toStep": "CreateOrUpdateTestPlan",
          "toParam": "CR"
        },
        {
          "fromStep": "PrepareVandV",
          "fromParam": "SWPP",
          "toStep": "CreateOrUpdateTestPlan",
          "toParam": "SWPP"
        }
      ],
      "_type": "DecisionNode",
      "code": "2"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "VerificationValidation",
          "fromParam": "CR",
          "toStep": "ReviewTestPlan",
          "toParam": "CR"
        },
        {
          "fromStep": "CreateOrUpdateTestPlan",
          "fromParam": "TestPlan",
          "toStep": "ReviewTestPlan",
          "toParam": "TestPlan"
        }
      ],
      "_type": "DecisionNode",
      "code": "3"
    }
  ],
  "prematureStepConditions": {},
  "input": {
    "CR": "azure_workitem"
  },
  "output": {
    "TestPlan": "azure_workitem",
    "CR": "azure_workitem"
  },
  "ioMapping": {},
  "conditions": {},
  "qaConstraints": [],
  "specOrderIndex": 0,
  "_type": "Process",
  "code": "VerificationValidation"
}