{
  "steps": [
    {
      "inDNDid": "0",
      "outDNDid": "2",
      "input": {
        "CR": "azure_workitem"
      },
      "output": {
        "SRS": "azure_workitem"
      },
      "ioMapping": {
        "SRS": "self.in_CR-\u003eany()\n  -\u003easType(\u003croot/types/azure_workitem\u003e)\n.relatedItems\n-\u003eselect(link | link.linkType.name.equalsIgnoreCase(\u0027Affects\u0027))\n-\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n-\u003eselect(refitem | refitem.workItemType.name.equalsIgnoreCase(\u0027Requirement\u0027) )\n-\u003easSet()\n-\u003esymmetricDifference(self.out_SRS)\n -\u003esize() \u003d 0\n\n  "
      },
      "conditions": {
        "PRECONDITION": "self.in_CR\n-\u003eforAll(issue | issue.workItemType.name \u003d \u0027Change Request\u0027) \nand self.in_CR-\u003esize() \u003d 1 ",
        "POSTCONDITION": "self.in_CR\n-\u003eforAll(issue | issue.state.name \u003d \u0027Released\u0027 \n                  or  issue.state.name \u003d \u0027Reviewed\u0027)\nand \nself.out_SRS-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_SRS-\u003esize() \u003e 0\nand\nself.out_SRS\n-\u003eforAll(req | req.state.name \u003d \u0027Released\u0027)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "AllReqReleased",
          "description": "Are all requirements in state released?"
        }
      ],
      "specOrderIndex": 1,
      "_type": "Step",
      "code": "Step1"
    },
    {
      "inDNDid": "2",
      "outDNDid": "1",
      "input": {
        "SRS": "azure_workitem",
        "CR": "azure_workitem"
      },
      "output": {
        "FuncSpec": "azure_workitem"
      },
      "ioMapping": {
        "FuncSpec": "self.in_SRS\n-\u003ecollect(req | req.relatedItems\n    -\u003eselect(link |  link.linkType.name.equalsIgnoreCase(\u0027Successor\u0027))\n     -\u003ecollect(link2 : \u003croot/types/workitem_link\u003e | link2.linkTo)\n     -\u003eselect(refitem | refitem.workItemType.name.equalsIgnoreCase(\u0027Functional Specification\u0027) )\n    -\u003eany())\n-\u003easSet()\n-\u003eselect(fs : \u003croot/types/azure_workitem\u003e | fs.isDefined()) \n-\u003esymmetricDifference(self.out_FuncSpec)\n -\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_SRS\n-\u003eforAll(req | req.state.name \u003d \u0027Released\u0027)\nand \nself.in_SRS-\u003esize() \u003e 0",
        "POSTCONDITION": "self.in_CR\n-\u003eforAll(issue | issue.state.name \u003d \u0027Released\u0027)\nand\nself.out_FuncSpec-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_FuncSpec-\u003esize() \u003e 0\nand\nself.out_FuncSpec\n-\u003eforAll(fs | \nfs.state.name\u003d\u0027Ready For Review\u0027\nor fs.state.name\u003d\u0027Reviewed\u0027\nor fs.state.name\u003d\u0027Released\u0027)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "FuncSpecReadyForReview",
          "description": "Ensure that all function specifications are in state \u0027ready for review\u0027 or \u0027reviewed\u0027 or \u0027released\u0027"
        }
      ],
      "specOrderIndex": 2,
      "_type": "Step",
      "code": "Step2"
    }
  ],
  "dns": [
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "Warmup",
          "fromParam": "CR",
          "toStep": "Step1",
          "toParam": "CR"
        }
      ],
      "_type": "DecisionNode",
      "code": "0"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "Step2",
          "fromParam": "FuncSpec",
          "toStep": "Warmup",
          "toParam": "FuncSpec"
        },
        {
          "fromStep": "Step1",
          "fromParam": "SRS",
          "toStep": "Warmup",
          "toParam": "SRS"
        }
      ],
      "_type": "DecisionNode",
      "code": "1"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "Warmup",
          "fromParam": "CR",
          "toStep": "Step2",
          "toParam": "CR"
        },
        {
          "fromStep": "Step1",
          "fromParam": "SRS",
          "toStep": "Step2",
          "toParam": "SRS"
        }
      ],
      "_type": "DecisionNode",
      "code": "2"
    }
  ],
  "prematureStepConditions": {},
  "input": {
    "CR": "azure_workitem"
  },
  "output": {
    "SRS": "azure_workitem",
    "FuncSpec": "azure_workitem"
  },
  "ioMapping": {},
  "conditions": {},
  "qaConstraints": [],
  "specOrderIndex": 0,
  "_type": "Process",
  "code": "Warmup"
}