{
  "steps": [
    {
      "inDNDid": "0",
      "outDNDid": "2",
      "input": {
        "story": "git_issue"
      },
      "output": {
        "cscSubtask": "git_issue",
        "sucSubtask": "git_issue",
        "mmfSubtask": "git_issue"
      },
      "ioMapping": {
        "cscSubtask": "self.in_story-\u003eany()\n-\u003easType(\u003croot/types/git_issue\u003e)\n.linkedIssues\n-\u003eselect( ref | ref.title.startsWith(\u0027CreateOrRefineCSC\u0027))\n-\u003easSet()\n-\u003esymmetricDifference(self.out_cscSubtask)\n-\u003esize() \u003d 0",
        "sucSubtask": "self.in_story-\u003eany()\n  -\u003easType(\u003croot/types/git_issue\u003e)\n     .linkedIssues\n-\u003eselect( ref | ref.title.startsWith(\u0027RefineToSUC\u0027))\n -\u003easSet()\n-\u003esymmetricDifference(self.out_sucSubtask)\n-\u003esize() \u003d 0",
        "mmfSubtask": "self.in_story-\u003eany()\n  -\u003easType(\u003croot/types/git_issue\u003e)\n     .linkedIssues\n-\u003eselect( ref | ref.title.startsWith(\u0027WriteOrReviseMMF\u0027))\n -\u003easSet()\n-\u003esymmetricDifference(self.out_mmfSubtask)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_story-\u003esize() \u003d 1 \nand \nself.in_story-\u003eforAll( story  | \n story.labels-\u003eincludes(\u0027Story\u0027))",
        "POSTCONDITION": "self.out_mmfSubtask-\u003esize() \u003e 0 \nand \nself.out_sucSubtask-\u003esize() \u003e 0 \nand \nself.out_cscSubtask-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.in_story\n-\u003eany()-\u003easType(\u003croot/types/git_issue\u003e)\n.linkedIssues\n-\u003eselect( ref | ref.labels\n -\u003eincludes(\u0027SR\u0027)) \n-\u003esize() \u003e 0",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "ProcessTraceToSR",
          "description": "Each Process (story) must trace to at least one Stakeholder Request (SR)"
        }
      ],
      "specOrderIndex": 1,
      "_type": "Step",
      "code": "PrepareProcess"
    },
    {
      "inDNDid": "2",
      "outDNDid": "3",
      "input": {
        "mmfSubtask": "git_issue"
      },
      "output": {
        "buc": "git_issue",
        "mmf": "git_issue"
      },
      "ioMapping": {
        "buc": "self.in_mmfSubtask-\u003eany()\n  -\u003easType(\u003croot/types/git_issue\u003e)\n     .linkedIssues\n-\u003eselect( ref | ref.labels-\u003eincludes(\u0027BUC\u0027))\n-\u003easSet()\n-\u003esymmetricDifference(self.out_buc)\n-\u003esize() \u003d 0",
        "mmf": "self.in_mmfSubtask-\u003eany()\n  -\u003easType(\u003croot/types/git_issue\u003e)\n     .linkedIssues\n-\u003eselect( ref | ref.labels-\u003eincludes(\u0027MMF\u0027))\n-\u003easSet()\n-\u003esymmetricDifference(self.out_mmf)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_mmfSubtask-\u003esize() \u003e 0",
        "POSTCONDITION": "self.in_mmfSubtask\n-\u003eforAll(task |\ntask.state.equalsIgnoreCase(\u0027closed\u0027))\nand \nself.out_mmf-\u003esize() \u003e 0 \nand \nself.out_buc-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_mmf\n-\u003eforAll( mmf1 | mmf1.linkedIssues\n-\u003eexists(art | art.labels-\u003eincludes(\u0027BUC\u0027)))",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "MMFtraceToBUC",
          "description": "Each linked MMF must trace to at least one Business Use Case (BUC)."
        },
        {
          "arlRule": "self.out_mmf\n-\u003eforAll(mmf | mmf.linkedIssues\n -\u003eselect(art : \u003croot/types/git_issue\u003e | art.labels\n  -\u003eincludes(\u0027SR\u0027))\n -\u003eforAll(sr2 : \u003croot/types/git_issue\u003e | sr2.linkedIssues\n -\u003eexists(art2 | art2.labels-\u003eincludes(\u0027BUC\u0027)) ) )",
          "specOrderIndex": 2,
          "_type": "QAConstraint",
          "code": "SRtraceToBUC",
          "description": "Each SR linked via an MMF must trace to at least one  Business Use Case (BUC)."
        },
        {
          "arlRule": "self.out_mmf\n-\u003eforAll( mmf1 | mmf1.linkedIssues\n-\u003eexists(art | art.labels-\u003eincludes(\u0027SR\u0027)))",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "MMFtraceToSR",
          "description": "Each linked MMF must trace to at least one Stakeholder Request (SR)."
        }
      ],
      "specOrderIndex": 2,
      "_type": "Step",
      "code": "WriteOrReviseMMF"
    },
    {
      "inDNDid": "3",
      "outDNDid": "4",
      "input": {
        "sucSubtask": "git_issue"
      },
      "output": {
        "suc": "git_issue"
      },
      "ioMapping": {
        "suc": "self.in_sucSubtask-\u003eany()\n  -\u003easType(\u003croot/types/git_issue\u003e)\n     .linkedIssues\n-\u003eselect( ref | ref.labels-\u003eincludes(\u0027SUC\u0027))\n-\u003easSet()\n-\u003esymmetricDifference(self.out_suc)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_sucSubtask-\u003esize() \u003e 0",
        "POSTCONDITION": "self.in_sucSubtask\n-\u003eforAll(task | task.state.equalsIgnoreCase(\u0027closed\u0027)) \nand \nself.out_suc-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_suc-\u003esize() \u003e 0\nand\nself.out_suc\n-\u003eforAll( suc1 | suc1.linkedIssues\n-\u003eexists(art | \nart.labels-\u003eincludes(\u0027SUC\u0027) \nor \nart.labels-\u003eincludes(\u0027BUC\u0027) \n))  ",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "SUCtraceToSUCorBUC",
          "description": "Each SUC must trace to at least one (parent) System Use Case (SUC) or a Business Use Case (BUC)"
        },
        {
          "arlRule": "self.in_sucSubtask-\u003eforAll(task | \n task.linkedIssues\n -\u003eforAll( ref | \n  ref.labels-\u003eexcludes(\u0027SUC\u0027) \n  and\n  ref.labels-\u003eexcludes(\u0027Story\u0027)\n))",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "OnlyTraceToSUCs",
          "description": "No engineering artifacts other than SUCs may be traced to."
        }
      ],
      "specOrderIndex": 3,
      "_type": "Step",
      "code": "RefineToSuc"
    },
    {
      "inDNDid": "4",
      "outDNDid": "1",
      "input": {
        "cscSubtask": "git_issue"
      },
      "output": {
        "csc": "git_issue"
      },
      "ioMapping": {
        "csc": "self.in_cscSubtask-\u003eany()\n  -\u003easType(\u003croot/types/git_issue\u003e)\n     .linkedIssues\n-\u003eselect( ref | ref.labels-\u003eincludes(\u0027CSC\u0027))\n-\u003easSet()\n-\u003esymmetricDifference(self.out_csc)\n-\u003esize() \u003d 0"
      },
      "conditions": {
        "PRECONDITION": "self.in_cscSubtask-\u003esize() \u003e 0",
        "POSTCONDITION": "self.out_csc-\u003esize() \u003e 0\nand\nself.in_cscSubtask\n-\u003eforAll(task |\ntask.state.equalsIgnoreCase(\u0027closed\u0027))"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_csc-\u003esize() \u003e 0\nand\nself.out_csc\n-\u003eforAll( csc1 | csc1.linkedIssues\n-\u003eexists(art | art.labels\n-\u003eincludes(\u0027SUC\u0027)))  ",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "CSCtraceToSUC",
          "description": "Each CSC must trace to at least one System Use Case (SUC)."
        }
      ],
      "specOrderIndex": 4,
      "_type": "Step",
      "code": "CreateOrRefineCSC"
    }
  ],
  "dns": [
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "SIELA-github",
          "fromParam": "story",
          "toStep": "PrepareProcess",
          "toParam": "story"
        }
      ],
      "_type": "DecisionNode",
      "code": "0"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "WriteOrReviseMMF",
          "fromParam": "buc",
          "toStep": "SIELA-github",
          "toParam": "buc"
        },
        {
          "fromStep": "CreateOrRefineCSC",
          "fromParam": "csc",
          "toStep": "SIELA-github",
          "toParam": "csc"
        },
        {
          "fromStep": "WriteOrReviseMMF",
          "fromParam": "mmf",
          "toStep": "SIELA-github",
          "toParam": "mmf"
        },
        {
          "fromStep": "RefineToSuc",
          "fromParam": "suc",
          "toStep": "SIELA-github",
          "toParam": "suc"
        }
      ],
      "_type": "DecisionNode",
      "code": "1"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareProcess",
          "fromParam": "mmfSubtask",
          "toStep": "WriteOrReviseMMF",
          "toParam": "mmfSubtask"
        }
      ],
      "_type": "DecisionNode",
      "code": "2"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareProcess",
          "fromParam": "sucSubtask",
          "toStep": "RefineToSuc",
          "toParam": "sucSubtask"
        }
      ],
      "_type": "DecisionNode",
      "code": "3"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "PrepareProcess",
          "fromParam": "cscSubtask",
          "toStep": "CreateOrRefineCSC",
          "toParam": "cscSubtask"
        }
      ],
      "_type": "DecisionNode",
      "code": "4"
    }
  ],
  "prematureStepConditions": {},
  "input": {
    "story": "git_issue"
  },
  "output": {
    "suc": "git_issue",
    "buc": "git_issue",
    "csc": "git_issue",
    "mmf": "git_issue"
  },
  "ioMapping": {},
  "conditions": {},
  "qaConstraints": [],
  "specOrderIndex": 0,
  "_type": "Process",
  "code": "SIELA-github"
}