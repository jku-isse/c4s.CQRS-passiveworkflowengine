{
  "steps": [
    {
      "inDNDid": "0",
      "outDNDid": "2",
      "input": {
        "CRs": "azure_workitem"
      },
      "output": {
        "Bugs": "azure_workitem",
        "REQs": "azure_workitem",
        "TCs": "azure_workitem"
      },
      "ioMapping": {
        "Bugs": "self.in_CRs-\u003eany()-\u003easType(\u003croot/types/azure/azure_workitem\u003e).successorItems\n-\u003eselect(item | item.workItemType\u003d\u0027Bug\u0027)",
        "REQs": "self.in_CRs-\u003eany()-\u003easType(\u003croot/types/azure/azure_workitem\u003e).successorItems\n-\u003eselect(item | item.workItemType\u003d\u0027Requirement\u0027)",
        "TCs": "self.in_CRs-\u003eany()-\u003easType(\u003croot/types/azure/azure_workitem\u003e).successorItems\n-\u003eselect(item | item.workItemType\u003d\u0027Test Case\u0027)"
      },
      "conditions": {
        "POSTCONDITION": "self.in_CRs-\u003eforAll(cr | cr.state\u003d\u0027Active\u0027) \nand\nself.out_REQs-\u003esize() \u003e 0\nand\nself.out_TCs-\u003esize() \u003e 0",
        "PRECONDITION": "self.in_CRs-\u003eforAll(cr | cr.workItemType\u003d\u0027Change Request\u0027)"
      },
      "qaConstraints": [
        {
          "arlRule": "self.out_REQs\n-\u003eforAll(req | req.predecessorItems\n    -\u003eselect(pre | pre.workItemType\u003d\u0027CR\u0027 \n                   and pre.state \u003c\u003e \u0027Released\u0027)\n    -\u003esize() \u003c 2\n)",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "REQtoCR",
          "description": "Ensure that each requirement trace to maximally one change request that is not in state \u0027Closed\"."
        },
        {
          "arlRule": "self.out_REQs\n-\u003eforAll(req | req.testedbyItems\n -\u003eexists(tc |  tc.workItemType \u003d \u0027Test Case\u0027 \n               and tc.state \u003d \u0027Released\u0027)\n)",
          "specOrderIndex": 2,
          "_type": "QAConstraint",
          "code": "REQtoTC",
          "description": "Ensure that each requirement traces to at least one testcase in state \u0027Released\u0027."
        },
        {
          "arlRule": "self.out_Bugs-\u003eforAll(bug | bug.affectedbyItems\n-\u003eexists(item | item.workItemType \u003d \u0027Requirement\u0027\n              and item.state \u003c\u003e \u0027Released\u0027)\n)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "BugsToREQ",
          "description": "Ensure that all bugs trace to at least one requirement that is not in status \u0027Released\u0027.."
        }
      ],
      "specOrderIndex": 1,
      "_type": "Step",
      "code": "TaskCategory1"
    },
    {
      "inDNDid": "2",
      "outDNDid": "3",
      "input": {
        "Bugs": "azure_workitem",
        "REQs": "azure_workitem",
        "CRs": "azure_workitem",
        "TCs": "azure_workitem"
      },
      "output": {},
      "ioMapping": {},
      "conditions": {
        "POSTCONDITION": "self.in_CRs-\u003eforAll(cr | cr.state\u003d\u0027Reviewed\u0027) ",
        "PRECONDITION": "self.in_Bugs-\u003esize() \u003e 0 and self.in_REQs-\u003esize() \u003e 0 and self.in_CRs-\u003esize() \u003e 0 and self.in_TCs-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.in_REQs\n-\u003eforAll(req | req.state \u003d \u0027Released\u0027\nand \nreq.successorItems\n-\u003eexists(item3 | item3.workItemType \u003d \u0027Review\u0027)\nand \nreq.successorItems\n-\u003eselect(item | item.workItemType \u003d \u0027Review\u0027)\n-\u003eexists(rev : \n           \u003croot/types/azure/azure_workitem\u003e | \n     rev.successorItems\n       -\u003eselect(item2 | item2.workItemType \u003d \n                                 \u0027ReviewFinding\u0027)\n       -\u003eforAll(finding : \n           \u003croot/types/azure/azure_workitem\u003e \n          | finding.state \u003c\u003e \u0027Open\u0027)\n  )\n)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "ReqReviewFindingsClosed",
          "description": "Ensure that all requirements are in state \u0027released\u0027 and trace to a review that has no open review findings."
        },
        {
          "arlRule": "self.in_REQs\n-\u003eselect(req | req.priority \u003d 1)\n-\u003eforAll(vipreq : \n           \u003croot/types/azure/azure_workitem\u003e  | \n           vipreq.successorItems\n -\u003eselect(item | item.workItemType \u003d \u0027Test Case\u0027)\n -\u003eexists(tc : \n           \u003croot/types/azure/azure_workitem\u003e  | \n         tc.successorItems\n    -\u003eexists(item2 | item2.workItemType\u003d\"Review\u0027)\nand\ntc.successorItems\n    -\u003eselect(item3 | item3.workItemType\u003d\"Review\u0027)\n    -\u003eforAll(rev : \n           \u003croot/types/azure/azure_workitem\u003e | \n               rev.state\u003d\u0027Closed\u0027)\n ) \n)",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "Prio1TCreviewed",
          "description": "Ensure that each requirement with priority 1 traces to at least one test case that in turn traces to a closed review."
        },
        {
          "arlRule": "self.in_REQs\n-\u003eforAll(req | req.affectedbyItems\n -\u003eselect(item | item.workItemType\u003d\u0027Bug\u0027)\n -\u003eforAll(bug : \n           \u003croot/types/azure/azure_workitem\u003e  | \n              bug.testedbyItems\n -\u003eintersection(\n  req.testedbyItems\n   -\u003eselect(item3 | item3.workItemType\u003d\u0027TC\u0027)\n   -\u003ecollect(tc : \n           \u003croot/types/azure/azure_workitem\u003e | \n                 tc.testsItems)\n   -\u003eselect(item2 : \n           \u003croot/types/azure/azure_workitem\u003e | \n                item2.workItemType \u003d \u0027Bug\u0027)\n  )-\u003esize() \u003e 0\n )\n)\n",
          "specOrderIndex": 2,
          "_type": "QAConstraint",
          "code": "Const1",
          "description": "Ensure for each requirement that has a bug that, at least one test case traces to this bug."
        }
      ],
      "specOrderIndex": 2,
      "_type": "Step",
      "code": "TaskCategory2"
    },
    {
      "inDNDid": "3",
      "outDNDid": "1",
      "input": {
        "Bugs": "azure_workitem",
        "REQs": "azure_workitem",
        "CRs": "azure_workitem",
        "TCs": "azure_workitem"
      },
      "output": {},
      "ioMapping": {},
      "conditions": {
        "POSTCONDITION": "self.in_CRs-\u003eforAll(cr | cr.state\u003d\u0027Released\u0027) ",
        "PRECONDITION": "self.in_Bugs-\u003esize() \u003e 0 and self.in_REQs-\u003esize() \u003e 0 and self.in_CRs-\u003esize() \u003e 0 and self.in_TCs-\u003esize() \u003e 0"
      },
      "qaConstraints": [
        {
          "arlRule": "self.in_Bugs\n-\u003eselect(bug | bug.affectsItems\n  -\u003eexists(item : \n           \u003croot/types/azure/azure_workitem\u003e  | \n             item.workItemType\u003d\u0027Requirement\u0027 and \n             item.priority\u003d1))\n-\u003eforAll(bug2 : \n           \u003croot/types/azure/azure_workitem\u003e  | \n            bug2.state\u003d\u0027Closed\u0027 \n     or  \n     bug2.affectsItems\n  -\u003eselect(item2 | \n                item2.workItemType\u003d\u0027Requirement\u0027 \n                and \n                item2.priority\u003d1)\n  -\u003eforAll(req : \n           \u003croot/types/azure/azure_workitem\u003e  | \n              req.successorItems\n             -\u003eexists(item3 | item3.workItemType \u003d \n                                        \u0027Issue\u0027\n               and item3.parentItems                       \n               -\u003eintersection(self.in_CRs).size() \u003e 0\n      )\n  )\n)",
          "specOrderIndex": 0,
          "_type": "QAConstraint",
          "code": "Prio1BugsClosedOrChildTask",
          "description": "Ensure either that all bugs for all prio 1 requirements are \"Closed\u0027 or that the requirement is traced from an open child issue (with name starting with \"Defer\") of the CR."
        },
        {
          "arlRule": "self.in_TCs\n-\u003eselect(tc | tc.testsItems\n    -\u003eexists(item | item.workItemType\u003d\u0027Bug\u0027\n             and \n        item.predecessorItems\n        -\u003eintersection(self.in_CRs).size() \u003e 0           \n))\n-\u003eforAll(tc2 : \n           \u003croot/types/azure/azure_workitem\u003e  | \n           tc2.testsItems\n    -\u003eselect(item2 | item2.workItemType\u003d\u0027Bug\u0027)\n           -\u003easList()-\u003efirst()\n          -\u003easType(\n           \u003croot/types/azure/azure_workitem\u003e )\n     .affectsItems\n    -\u003eselect(item3 | \n                item3.workItemType\u003d\u0027Requirement\u0027)\n    -\u003eintersection(tc2.testsItems \n         -\u003eselect(item4 | \n                item4.workItemType\u003d\u0027Requirement\u0027)\n       )-\u003esize() \u003e 0\n)",
          "specOrderIndex": 1,
          "_type": "QAConstraint",
          "code": "BugAndTCtoREQ",
          "description": "Ensure that all TC testing Bugs that link to the CR also identify the same set of requirements."
        },
        {
          "arlRule": "self.in_REQs\n-\u003eselect(req | req.predecessorItems\n  -\u003eexists(item | item.workItemType\u003d\u0027Issue\u0027\n        and item.state\u003d\u0027Open\u0027)\n)\n-\u003eforAll(req2 : \n           \u003croot/types/azure/azure_workitem\u003e  | \n       req2.predecessorItems\n     -\u003eselect(item3 | item3.workItemType\u003d\u0027CR\u0027 \n               and item3.state\u003c\u003e\u0027Closed\u0027)\n     -\u003eintersection(\n   req2.predecessorItems\n   -\u003eselect(item2 | item2.workItemType\u003d\u0027Issue\u0027\n          and item2.state\u003d\u0027Open\u0027 )\n   -\u003ecollect(issue : \n           \u003croot/types/azure/azure_workitem\u003e  | \n            issue.parentItems-\u003easList()-\u003efirst()\n           -\u003easType( \n           \u003croot/types/azure/azure_workitem\u003e ) )\n   )-\u003esize() \u003e 0\n)",
          "specOrderIndex": 2,
          "_type": "QAConstraint",
          "code": "ReqToSubtaskParent",
          "description": "Ensure that all requirements that are referenced in an open subissue, have the same predecessor as the subissue\u0027s parent."
        }
      ],
      "specOrderIndex": 3,
      "_type": "Step",
      "code": "TaskCategory3"
    }
  ],
  "dns": [
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "ProcessAll",
          "fromParam": "CRs",
          "toStep": "TaskCategory1",
          "toParam": "CRs"
        }
      ],
      "depthIndex": -1,
      "_type": "DecisionNode",
      "code": "0"
    },
    {
      "inflowType": "AND",
      "mapping": [],
      "depthIndex": -1,
      "_type": "DecisionNode",
      "code": "1"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "ProcessAll",
          "fromParam": "CRs",
          "toStep": "TaskCategory2",
          "toParam": "CRs"
        },
        {
          "fromStep": "TaskCategory1",
          "fromParam": "Bugs",
          "toStep": "TaskCategory2",
          "toParam": "Bugs"
        },
        {
          "fromStep": "TaskCategory1",
          "fromParam": "REQs",
          "toStep": "TaskCategory2",
          "toParam": "REQs"
        },
        {
          "fromStep": "TaskCategory1",
          "fromParam": "TCs",
          "toStep": "TaskCategory2",
          "toParam": "TCs"
        }
      ],
      "depthIndex": -1,
      "_type": "DecisionNode",
      "code": "2"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "TaskCategory1",
          "fromParam": "TCs",
          "toStep": "TaskCategory3",
          "toParam": "TCs"
        },
        {
          "fromStep": "TaskCategory1",
          "fromParam": "Bugs",
          "toStep": "TaskCategory3",
          "toParam": "Bugs"
        },
        {
          "fromStep": "TaskCategory1",
          "fromParam": "REQs",
          "toStep": "TaskCategory3",
          "toParam": "REQs"
        },
        {
          "fromStep": "ProcessAll",
          "fromParam": "CRs",
          "toStep": "TaskCategory3",
          "toParam": "CRs"
        }
      ],
      "depthIndex": -1,
      "_type": "DecisionNode",
      "code": "3"
    }
  ],
  "prematureStepConditions": {},
  "processConfig": {},
  "input": {
    "CRs": "azure_workitem"
  },
  "output": {},
  "ioMapping": {},
  "conditions": {},
  "qaConstraints": [],
  "specOrderIndex": 0,
  "_type": "Process",
  "code": "ProcessAll"
}