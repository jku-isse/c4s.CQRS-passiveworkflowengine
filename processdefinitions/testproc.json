{
  "steps": [
    {
      "inDNDid": "dndParentStart",
      "outDNDid": "dndParentEnd",
      "input": {
        "jiraIn": "DemoIssue"
      },
      "output": {},
      "ioMapping": {},
      "conditions": {
        "PRECONDITION": "self.in_jiraIn-\u003esize() \u003d 1",
        "POSTCONDITION": "self.in_jiraIn-\u003eforAll( issue | issue.state \u003d \u0027Closed\u0027)"
      },
      "qaConstraints": [],
      "_type": "Step",
      "code": "paratask1"
    },
    {
      "steps": [
        {
          "inDNDid": "dndSubStart",
          "outDNDid": "dndSubEnd",
          "input": {
            "jiraIn": "DemoIssue"
          },
          "output": {
            "jiraOut": "DemoIssue"
          },
          "ioMapping": {
            "jiraIn2jiraOut": "self.in_jiraIn-\u003eforAll(artIn | self.out_jiraOut-\u003eexists(artOut  | artOut \u003d artIn)) and self.out_jiraOut-\u003eforAll(artOut2 | self.in_jiraIn-\u003eexists(artIn2  | artOut2 \u003d artIn2))"
          },
          "conditions": {
            "PRECONDITION": "self.in_jiraIn-\u003esize() \u003d 1",
            "POSTCONDITION": "self.in_jiraIn-\u003eforAll( issue | issue.state \u003d \u0027Closed\u0027)"
          },
          "qaConstraints": [],
          "_type": "Step",
          "code": "subtask1"
        },
        {
          "inDNDid": "dndSubStart",
          "outDNDid": "dndSubEnd",
          "input": {
            "jiraIn": "DemoIssue"
          },
          "output": {},
          "ioMapping": {},
          "conditions": {
            "PRECONDITION": "self.in_jiraIn-\u003esize() \u003d 1",
            "POSTCONDITION": "self.in_jiraIn-\u003eforAll( issue | issue.state \u003d \u0027Closed\u0027)"
          },
          "qaConstraints": [],
          "_type": "Step",
          "code": "subtask2"
        }
      ],
      "dns": [
        {
          "inflowType": "AND",
          "mapping": [
            {
              "fromStep": "TestSerializeProc1",
              "fromParam": "jiraIn",
              "toStep": "subtask2",
              "toParam": "jiraIn"
            },
            {
              "fromStep": "TestSerializeProc1",
              "fromParam": "jiraIn",
              "toStep": "subtask1",
              "toParam": "jiraIn"
            }
          ],
          "_type": "DecisionNode",
          "code": "dndSubStart"
        },
        {
          "inflowType": "AND",
          "mapping": [
            {
              "fromStep": "subtask1",
              "fromParam": "jiraOut",
              "toStep": "TestSerializeProc1",
              "toParam": "jiraOut"
            }
          ],
          "_type": "DecisionNode",
          "code": "dndSubEnd"
        }
      ],
      "inDNDid": "dndParentStart",
      "outDNDid": "dndParentEnd",
      "input": {
        "jiraIn": "DemoIssue"
      },
      "output": {
        "jiraOut": "DemoIssue"
      },
      "ioMapping": {},
      "conditions": {
        "PRECONDITION": "self.in_jiraIn-\u003esize() \u003d 1"
      },
      "qaConstraints": [],
      "_type": "Process",
      "code": "TestSerializeProc1",
      "description": "Test for Serialization"
    }
  ],
  "dns": [
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "TestSerializeParentProc1",
          "fromParam": "jiraIn",
          "toStep": "paratask1",
          "toParam": "jiraIn"
        },
        {
          "fromStep": "TestSerializeParentProc1",
          "fromParam": "jiraIn",
          "toStep": "TestSerializeProc1",
          "toParam": "jiraIn"
        }
      ],
      "_type": "DecisionNode",
      "code": "dndParentStart"
    },
    {
      "inflowType": "AND",
      "mapping": [
        {
          "fromStep": "TestSerializeProc1",
          "fromParam": "jiraOut",
          "toStep": "TestSerializeParentProc1",
          "toParam": "jiraOut"
        }
      ],
      "_type": "DecisionNode",
      "code": "dndParentEnd"
    }
  ],
  "input": {
    "jiraIn": "DemoIssue"
  },
  "output": {
    "jiraOut": "DemoIssue"
  },
  "ioMapping": {},
  "conditions": {
    "PRECONDITION": "self.in_jiraIn-\u003esize() \u003d 1"
  },
  "qaConstraints": [],
  "_type": "Process",
  "code": "TestSerializeParentProc1",
  "description": "Test for Serialization"
}