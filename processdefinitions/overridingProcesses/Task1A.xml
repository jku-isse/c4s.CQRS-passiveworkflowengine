<xml xmlns="https://developers.google.com/blockly/xml">
  <variables>
    <variable id="mT+T=Lz)IT.wpd@9@${J">REQs</variable>
    <variable id="WNAvoU`9:C=KWe.j%8;n">CRs</variable>
  </variables>
  <block type="procedures_defnoreturn" id="z/?WA}5)#.CUvTiD;E:x" x="113" y="-287">
    <field name="NAME">Task1A</field>
    <comment pinned="false" h="248" w="895">This task is about preparing the implementation of requirements within a change request. Here QA measures focus on ensuring traces lead from requirements to other artifacts (e.g., bugs, reviews, issues etc.). The purpose of having traceability is to establish a clear and documented connection between which software requirements are addressed in a change request, that they have been reviewed and which bugs from the current software release affect them. &#10;&lt;br&gt;&lt;br&gt;&#10;For this task, your goal is to ensure the trace between requirements and bugs. The previous engineer has marked the task as complete (c.f., post conditions are fulfilled) but did not manage to fulfill the QA constraints. Your task is to find and execute the most suitable repair of the QA violations.&#10;</comment>
    <statement name="STACK">
      <block type="variables_set" id=";Xw9uH0-^~f*2B3tF(`-">
        <field name="VAR" id="mT+T=Lz)IT.wpd@9@${J">REQs</field>
        <value name="VALUE">
          <block type="artifact" id="JTYSsYxqk+vBTi!RA=BJ">
            <field name="Type">root/types/azure/azure_workitem</field>
          </block>
        </value>
        <next>
          <block type="artuse" id="QDP-uXdA`vKJ,ywO%Fv3">
            <field name="roletext">Param</field>
            <value name="NAME">
              <block type="variables_get" id="X^KK.om:SDZM@OBTj@bm">
                <field name="VAR" id="mT+T=Lz)IT.wpd@9@${J">REQs</field>
              </block>
            </value>
            <next>
              <block type="step" id=";GKoN_~dB/lmt7(Wyf9o">
                <field name="StepId">ReqtoCR</field>
                <statement name="Input">
                  <block type="artuse" id=".)L{u(k_o[$|-5r?:@{)">
                    <field name="roletext">Param</field>
                    <value name="NAME">
                      <block type="variables_get" id="BfiaLE2f=lWE,/t1bq,!">
                        <field name="VAR" id="mT+T=Lz)IT.wpd@9@${J">REQs</field>
                      </block>
                    </value>
                  </block>
                </statement>
                <statement name="Transitions">
                  <block type="transition" id="x!0-Y3g0L;1;R4f~ZJ-1">
                    <field name="State">PRECONDITION</field>
                    <field name="isOverridable">TRUE</field>
                    <value name="condition">
                      <block type="constraint" id="=dNSf[uB(9Vr;fl%J;(5">
                        <field name="arlRule">self.in_REQs&#10;        -&gt;select(req | req.state='Released').size()&gt;1</field>
                      </block>
                    </value>
                    <next>
                      <block type="transition" id="V@3K-LuIw)_oXhxk3=`3">
                        <field name="State">POSTCONDITION</field>
                        <field name="isOverridable">FALSE</field>
                        <value name="condition">
                          <block type="constraint" id="hRj.#?NxyKmguLZ!bm6[">
                            <field name="arlRule">self.out_CRs-&gt;forAll(cr | cr.successorItems-&gt;exists(suc1| suc1.externalType='Requirement')&#10;and&#10;cr.successorItems-&gt;exists(suc2| suc2.externalType='Bug')&#10;and&#10;cr.successorItems-&gt;exists(suc3| suc3.externalType='Test Case'))</field>
                          </block>
                        </value>
                      </block>
                    </next>
                  </block>
                </statement>
                <statement name="Datamappings">
                  <block type="datamapping" id="C*F)^s!x?d`SFa9kDB~6">
                    <field name="mappingId">CRs</field>
                    <field name="mappingSpec">self.in_REQs-&gt;any()-&gt;asType(&lt;root/types/azure/azure_workitem&gt;).predecessorItems&#10;		-&gt;select(item | item.externalType='Change Request')</field>
                  </block>
                </statement>
                <statement name="Output">
                  <block type="variables_set" id=",EfP@7L#Wy21I4XExfGs">
                    <field name="VAR" id="WNAvoU`9:C=KWe.j%8;n">CRs</field>
                    <value name="VALUE">
                      <block type="artifact" id="fDF}-Pd]WD*1V@n+{xVk">
                        <field name="Type">root/types/azure/azure_workitem</field>
                      </block>
                    </value>
                    <next>
                      <block type="artuse" id="ly(}V1)Z@!mJg5Jh2b=-">
                        <field name="roletext">Param</field>
                        <value name="NAME">
                          <block type="variables_get" id="gajG9dezyQcxLZZ:JY}a">
                            <field name="VAR" id="WNAvoU`9:C=KWe.j%8;n">CRs</field>
                          </block>
                        </value>
                      </block>
                    </next>
                  </block>
                </statement>
                <statement name="QA">
                  <block type="qacheck" id="k?$CQfAt=OVZFDItjH0s">
                    <field name="qacheckId">QAConst_1.1</field>
                    <field name="description">All released requirements must have a trace (via 'predecessorItems') to a released change request.</field>
                    <field name="isOverridable">FALSE</field>
                    <value name="constraint">
                      <block type="constraint" id="Jm9g:e(L^!/,MBc:)VU@">
                        <field name="arlRule">self.in_REQs&#10;        -&gt;select(req | req.state='Released')&#10;        -&gt;forAll(rreq | rreq.predecessorItems &#10;                  -&gt; select(pre | pre.externalType='Change Request')&#10;                  -&gt; forAll(cr | cr.state='Released'))</field>
                      </block>
                    </value>
                  </block>
                </statement>
              </block>
            </next>
          </block>
        </next>
      </block>
    </statement>
  </block>
</xml>