package processdefinition;

import org.axonframework.commandhandling.gateway.CommandGateway;

import java.util.stream.Collectors;
import java.util.Optional
import java.time.Instant
import java.util.concurrent.TimeUnit
import java.util.List
import java.util.ArrayList
import java.util.Map
import java.util.HashMap
import java.util.LinkedHashMap
import java.util.Iterator;

import passiveprocessengine.definition.ArtifactTypes
import passiveprocessengine.instance.*
import passiveprocessengine.definition.*
import passiveprocessengine.definition.TaskLifecycle.State;

import artifactapi.ResourceLink
import artifactapi.IArtifactRegistry
import artifactapi.ArtifactIdentifier
import artifactapi.IArtifactRegistry
import at.jku.designspace.sdk.polarion.polarionapi.interfaces.*

import org.jsoup.Jsoup
import org.jsoup.nodes.*
import c4s.impactassessment.tools.*

import impactassessment.kiesession.KieSessionUtils
import impactassessment.api.Commands.*
import impactassessment.api.Events.*
import org.axonframework.commandhandling.gateway.CommandGateway


global CommandGateway commandGateway;
global IArtifactRegistry artifactRegistry;


rule "InsertQAConstraintsStateResolved"
	when
        $wft : WorkflowTask( getType().getId().equals("Open") &&
                                    getAnyOneOutputByRole(ArtifactTypes.ARTIFACT_TYPE_QA_CHECK_DOCUMENT) == null) // when first created, thus no assocated QADocument
	then
		Map<String, String> constraints = new LinkedHashMap<>();
		constraints.put("AssigneeNotEmpty", "Is the Assignee not empty?");
		constraints.put("AuthorNotEmpty", "Is the Author not empty?");
		constraints.put("CheckPolarionHTMLAnlass", "Does the Polarion Description contain a mandatory Section 'Anlass'?");
		constraints.put("CheckPolarionHTMLZiel", "Does the Polarion Description contain a mandatory Section 'Ziel'?");
		constraints.put("CheckPolarionHTMLBediener", "Does the Polarion Description contain a filled optional or otherwise removed Section 'Bedienerteil'?");
		constraints.put("CheckPolarionHTMLTech", "Does the Polarion Description contain a filled optional or otherwise removed Section 'Technischer Teil'?");
		constraints.put("CheckPolarionHTMLIntern", "Does the Polarion Description contain a filled optional or otherwise removed Section 'ENGEL interner Teil'?");
		constraints.put("CheckPolarionHTMLDetails", "Does the Polarion Description contain a filled optional or otherwise removed Section 'Technische Details'?");
		commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
end



/*
rule "AssigneeNotEmpty"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "AssigneeNotEmpty" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )		
		eval($item != null)
	then
		IPolarionArtifact pol = (IPolarionArtifact)$item;
		boolean success = ( pol.getAssignee() != null );
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end	 
*/

rule "ClearHTMLMap"
	salience 2999
	no-loop
	when
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneOutputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
		$aue : UpdatedArtifactsEvt( artifacts.contains($item.getArtifactIdentifier()) )
	then
		// whenever the Workitem is update, we dont know whether the html has also changed, thus we remove the current map, and thus allow the next rule below to trigger again.
		delete($map);
		// we don't need to remove the event, as other rules may react to it and we remove it eventually anyway by the rule at the very bottom.
end

rule "DescriptionHTMLtoElements"
	no-loop
	when
		$wft : WorkflowTask (   getType().getId().equals("Open") &&
								!(getActualLifecycleState().equals(TaskLifecycle.State.COMPLETED))  
								 , $item : getAnyOneInputByRole("workitem") 								
							 ) 
		eval ($item != null && $item instanceof IPolarionArtifact && ((IPolarionArtifact)$item).getDescription() != null )					 
		not JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		JsoupMap elMap = new JsoupMap($wft.getId());
		String descrHTML = ((IPolarionArtifact)$item).getDescription();
		Document doc = Jsoup.parse(descrHTML);
		//System.out.println(doc);
		Element scope = doc.select("body").first();
		Element startBesch = doc.select("span:contains(Beschreibung des Anlasses)").first();
		if (startBesch != null) elMap.put("Anlass", startBesch);
		Element startZiel = doc.select("span:contains(Ziel:)").first();
		if (startZiel != null) elMap.put("Ziel", startZiel);
		Element startVerhalten = doc.select("span:contains(Funktion / Verhalten)").first();
		if (startVerhalten != null) elMap.put("Verhalten", startVerhalten);
		// optionals:
		Element startBediener = doc.select("span:contains(Bedienerteil)").first();
		if (startBediener != null) elMap.put("Bediener", startBediener);
		Element startTech = doc.select("span:contains(Technischer Teil:)").first();
		if (startTech != null) elMap.put("Tech", startTech);
		Element startIntern = doc.select("span:contains(ENGEL interner Teil:)").first();
		if (startIntern != null) elMap.put("Intern", startIntern);
		Element startDetails = doc.select("span:contains(Technische Details:)").first();
		if (startDetails != null) elMap.put("Details", startDetails);
		Element endDetails = doc.select("br").last();
		if (endDetails != null) elMap.put("Ende", endDetails);
		Element techtableFirstContentRow = doc.select("div > span > table > tbody > tr:gt(0)").first();
		if (techtableFirstContentRow != null) elMap.put("TechTabelle",  techtableFirstContentRow);
		//String tableContent = RangeExtractor.getCleanedContent(techtableFirstContentRow);
		insert( elMap );
end
 

rule "CheckPolarionHTMLAnlass"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckPolarionHTMLAnlass" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		Element el = $map.get("Anlass");
		boolean success = ( el != null  && 
						RangeExtractor.appendContentOfNodesBetween((Node)el, $map.getValuesAsNodes(), el.root()).length() > 5 );
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckPolarionHTMLZiel"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckPolarionHTMLZiel" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		Element el = $map.get("Ziel");
		boolean success = ( el != null  && 
						RangeExtractor.appendContentOfNodesBetween((Node)el, $map.getValuesAsNodes(), el.root()).length() > 5 );
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckPolarionHTMLBediener"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckPolarionHTMLBediener" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		Element el = $map.get("Bediener");
		boolean success = ( el == null || //either not existing, which is fine for optional
						( //or not empty
							el != null  && 
							RangeExtractor.appendContentOfNodesBetween((Node)el, $map.getValuesAsNodes(), el.root()).length() > 5 )
						);
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckPolarionHTMLTech"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckPolarionHTMLTech" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		Element el = $map.get("Tech");
		boolean success = ( el == null || //either not existing, which is fine for optional
						( //or not empty
							el != null  && 
							RangeExtractor.appendContentOfNodesBetween((Node)el, $map.getValuesAsNodes(), el.root()).length() > 5 )
						);
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckPolarionHTMLIntern"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckPolarionHTMLIntern" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		Element el = $map.get("Intern");
		boolean success = ( el == null || //either not existing, which is fine for optional
						( //or not empty
							el != null  && 
							RangeExtractor.appendContentOfNodesBetween((Node)el, $map.getValuesAsNodes(), el.root()).length() > 5 )
						);
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckPolarionHTMLDetails"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckPolarionHTMLDetails" ))
		$wft : WorkflowTask( getType().getId().equals("Open") ,  $item : getAnyOneInputByRole("workitem") )
		$map : JsoupMap (name.equalsIgnoreCase($wft.getId()) )
	then
		Element el = $map.get("Details");
		boolean success = ( el == null || //either not existing, which is fine for optional
						( //or not empty
							el != null  && 
							RangeExtractor.appendContentOfNodesBetween((Node)el, $map.getValuesAsNodes(), el.root()).length() > 5 )
						);
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put($item.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CopyInToOut"
	when
		$wft : WorkflowTask (   getType().getId().equals("Open") &&
								!(getActualLifecycleState().equals(TaskLifecycle.State.COMPLETED)) &&
								 getAnyOneOutputByRole("workitem") == null 
								 , $item : getAnyOneInputByRole("workitem") 								
							 ) 
		eval ($item != null )					 
	then
		System.out.println("Copying into output polarion workitem");
		IPolarionArtifact pol = (IPolarionArtifact)$item;
		commandGateway.send(new AddOutputCmd($wft.getWorkflow().getId(), $wft.getId(), $item.getArtifactIdentifier().getId(), "workitem", "IPolarionArtifact"));
		//commandGateway.send(new AddOutputCmd($wft.getWorkflow().getId(), $wft.getId(), pol.getId(), "workitem", "IPolarionArtifact"));
end

rule "SetWFName"
	salience 3000
	when
		$wfi : WorkflowInstance( getName() == null, $item : getAnyOneInputByRole("workitem")  )	
		eval ($item != null )	
	then
		IPolarionArtifact pol = (IPolarionArtifact)$item;
		LinkedHashMap propsToAdd = new LinkedHashMap<String,String>();
		propsToAdd.put("name", pol.getTitle());
		// we the workflow name for now to the jama issues Key, if jama indeed was provided
		commandGateway.send(new SetPropertiesCmd($wfi.getId(), $wfi.getId(), propsToAdd));
end

rule "RemoveConstraintTrigger"
	salience -1000
	when
		$ct : ConstraintTrigger()
	then
		delete($ct);
end

rule "RemoveArtifactUpdateEvent"
	salience 2000
	when
		$aue : UpdatedArtifactsEvt()
	then
		delete($aue);
end