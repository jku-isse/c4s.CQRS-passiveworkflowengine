package processdefinition;

import org.axonframework.commandhandling.gateway.CommandGateway;

import java.time.Instant;
import java.util.Optional;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;

import c4s.impactassessment.workflowmodel.TaskLifecycle.*;
import passiveprocessengine.definition.*;
import passiveprocessengine.instance.*;
import impactassessment.api.Commands.AddEvaluationResultToConstraintCmd;
import impactassessment.api.Commands.AddOutputCmd;
import impactassessment.api.Commands.AddConstraintsCmd;


import artifactapi.IArtifact;
import artifactapi.ArtifactIdentifier;
import artifactapi.IArtifactRegistry;
import artifactapi.jira.IJiraArtifact;
import artifactapi.jama.IJamaArtifact;
import artifactapi.jama.subtypes.*;
import artifactapi.jira.subtypes.*;

global CommandGateway commandGateway;
global IArtifactRegistry artifactRegistry;

//constraints for state open
rule "InsertQAConstraintsEvaluateTask"
	when
		$wft : WorkflowTask(    getType().getId().equals("Evaluate") &&
		                        getAnyOneOutputByRole(ArtifactTypes.ARTIFACT_TYPE_QA_CHECK_DOCUMENT) == null)
	then
        System.out.println("Adding Constraints to Task: Evaluate");
        Map<String, String> constraints = new HashMap<>();
        constraints.put("CheckJiraExists", "Is there a Jira issue linked?");
        constraints.put("ReviewDone", "Has the design review been completed (Subask with status 'closed')?");
        
        commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
end

rule "InsertQAConstraintsExecuteTask"
	when
		$wft : WorkflowTask(    getType().getId().equals("Execute") &&
		                        getAnyOneOutputByRole(ArtifactTypes.ARTIFACT_TYPE_QA_CHECK_DOCUMENT) == null)
	then
        System.out.println("Adding Constraints to Task: Execute");
        Map<String, String> constraints = new HashMap<>();
       
        
        constraints.put("CheckSRS", "Is there at least one downstream SRS linked?");
        constraints.put("CheckSSS", "Is there at least one downstream SSS linked?");
        constraints.put("CheckSSSupSUSY", "Does every SSS have at least one upstream SUSY linked?");
        constraints.put("CheckSSSupCSC", "Does every SSS have at least one upstream CSC linked?");
        constraints.put("CheckSSSdownFCSC", "Does every SSS have at least one downstream F-CSC linked?");
        constraints.put("CheckSSSdownTC", "Does every SSS have at least one downstream TC linked?");
        constraints.put("CheckSRSdownTC", "Does every SRS have at least one downstream TC linked?");
        constraints.put("CheckSSSreleased", "Is every SSS in status 'Released'?");
        constraints.put("CheckSRSreleased", "Is every SRS in status 'Released'?");
        constraints.put("CheckSRShasRelease", "Does every SRS have a non-empty Release?");
        constraints.put("CheckSSShasRelease", "Does every SSS have a non-empty Release?");
        
        constraints.put("CheckJiraSubtasksClosed", "Are all Jira issue subtasks in status 'closed'?");
        constraints.put("CheckJiraClosed", "Is the Jira issue in status 'closed'?");
        
        commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
end

/*
constrains:
feature / jama
	feature from downstream must have at least one SSS
	feature from downstream must have at least one SRS
	
	each sss must have at least on upstream SUSY (subsystem) item
	each sss must have at least one upstread CSC,
		at least one downstream F-CSC (item type)
	
	both sss and srs must have at least one TC (downstream), need not be the same
	sss and srs must be in status released
	
	example to access the release field and compare, or description is not empty


constraints
jira:	
	access a fixversion field not empty
	components not empty
	jira item must be closed 
	
Step: 	
	Impact assessment
	Critical design review is done, then Estimation 
	CDR as output, and then do the check on that if empty
	SSS SRS TC Implementation Documentation TestVersion at least one subtask that these are there
	if CDR is closed then do the checks
	resolution wont fix then dont do these checks
	*/
/**/

rule "CheckJamaDownstreamSRS"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSRS" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
		,  $jama : getAnyOneInputByRole("jama")
		)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		boolean success = ja.getDownstreamItems($wft.getWorkflow().getId()).stream()
			.anyMatch(dsi -> dsi.getItemType().equals("SRS"));
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put(ja.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJamaDownstreamSSS"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSS" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
		,  $jama : getAnyOneInputByRole("jama")
		)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		boolean success = ja.getDownstreamItems($wft.getWorkflow().getId()).stream()
			.anyMatch(dsi -> dsi.getItemType().equals("SSS"));
			
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		result.put(ja.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSSSupSUSY"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSupSUSY" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SSS")) {
					boolean success = false;
					for (IJamaArtifact usi : dsi.getUpstreamItems($wft.getWorkflow().getId())) {
						if (usi.getItemType().equals("SUSY")) {
							success = true;
							break;
						}
					}
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSSSupCSC"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSupCSC" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SSS")) {
					boolean success = false;
					for (IJamaArtifact usi : dsi.getUpstreamItems($wft.getWorkflow().getId())) {
						if (usi.getItemType().equals("CSC")) {
							success = true;
							break;
						}
					}
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSSSdownFCSC"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSdownFCSC" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SSS")) {
					boolean success = false;
					for (IJamaArtifact usi : dsi.getDownstreamItems($wft.getWorkflow().getId())) {
						if (usi.getItemType().equals("F-CSC")) {
							success = true;
							break;
						}
					}
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end



rule "CheckSSSdownTC"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSdownTC" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SSS")) {
					boolean success = false;
					for (IJamaArtifact usi : dsi.getDownstreamItems($wft.getWorkflow().getId())) {
						if (usi.getItemType().equals("TC")) {
							success = true;
							break;
						}
					}
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSRSdownTC"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSRSdownTC" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SRS")) {
					boolean success = false;
					for (IJamaArtifact usi : dsi.getDownstreamItems($wft.getWorkflow().getId())) {
						if (usi.getItemType().equals("TC")) {
							success = true;
							break;
						}
					}
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end


rule "CheckSSSreleased"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSreleased" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SSS")) {
					boolean success = dsi.getStringValue("status").equals("Released");
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSRSreleased"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSreleased" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SRS")) {
					boolean success = dsi.getStringValue("status").equals("Released");
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSSShasRelease"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSShasRelease" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SSS")) {
					IJamaRelease release = dsi.getJamaReleaseValue("release");
					boolean success = ( release != null && release.getName() != null && release.getReleaseDate() != null) ;
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckSRShasRelease"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSRShasRelease" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		for (IJamaArtifact dsi : ja.getDownstreamItems($wft.getWorkflow().getId())) {
			if (dsi.getItemType().equals("SRS")) {
					IJamaRelease release = dsi.getJamaReleaseValue("release");
					boolean success = ( release != null && release.getName() != null && release.getReleaseDate() != null) ;
					result.put(dsi.convertToResourceLink(), success);	
			}
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

/*
rule "CheckSSSupCSC"
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckSSSupCSC" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
			,  $jama : getAnyOneInputByRole("jama")
			)
		eval ($jama != null)
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
	//	commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
		
		long count = ja.getDownstreamItems($wft.getWorkflow().getId()).stream()
			.filter(dsi -> dsi.getItemType().equals("SSS"))
			.map(dsi -> {String type = dsi.getItemType(); 
				return type; })
			.count();		

		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end



rule "CheckJiraSubtasksAllClosed" 
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckJiraSubtasksClosed" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
		, $jira : getAnyOneOutputByRole("jira") 
		)
		eval ($jira != null)
	then
		System.out.println("Checking: "+$qac.getId() +" in workflow " +$wft.getWorkflow().getId());
		IJiraArtifact ja = (IJiraArtifact) ((ArtifactWrapper)$jira).getWrappedArtifact();
	
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		ja.getSubtasks()
			.forEach(jst -> { String status = jst.getStatus().getName();
				IJiraArtifact subt = (IJiraArtifact) artifactRegistry.get(new ArtifactIdentifier(jst.getIssueKey(), "IJiraArtifact"), $wft.getWorkflow().getId()).get();
				if (status.equals("Closed")) {
					result.put(subt.convertToResourceLink(), true);
				} else {
					result.put(subt.convertToResourceLink(), false);
				}
			});	
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end
/**/


rule "CheckJiraExists" 
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckJiraExists" ))
		$wft : WorkflowTask( getType().getId().equals("Evaluate") 
		, $jira : getAnyOneOutputByRole("jira") 
		,  $jama : getAnyOneInputByRole("jama")
		)
		eval ($jama != null)
	then
		System.out.println("Checking: "+$qac.getId() +" in workflow " +$wft.getWorkflow().getId());
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		boolean doesExist = ($jira != null);
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		if (!doesExist)
			result.put(ja.convertToResourceLink(), doesExist);
		else {
			IJiraArtifact jira = (IJiraArtifact) ((ArtifactWrapper)$jira).getWrappedArtifact();
			result.put(jira.convertToResourceLink(), doesExist);
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckCheckIssueClosed" 
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "ReviewDone" ))
		$wft : WorkflowTask( getType().getId().equals("Evaluate") 
		, $jira : getAnyOneOutputByRole("checkissue") 
		)
		eval ($jira != null)
	then
		System.out.println("Checking: "+$qac.getId() +" in workflow " +$wft.getWorkflow().getId());
		IJiraArtifact ja = (IJiraArtifact) ((ArtifactWrapper)$jira).getWrappedArtifact();
	
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		boolean success = ja.getStatus().getName().equals("Closed");
		result.put(ja.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "CheckJiraClosed" 
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckJiraClosed" ))
		$wft : WorkflowTask( getType().getId().equals("Execute") 
		, $jira : getAnyOneOutputByRole("jira") 
		)
		eval ($jira != null)
	then
		System.out.println("Checking: "+$qac.getId() +" in workflow " +$wft.getWorkflow().getId());
		IJiraArtifact ja = (IJiraArtifact) ((ArtifactWrapper)$jira).getWrappedArtifact();
	
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		boolean success = ja.getStatus().getName().equals("Closed");
		result.put(ja.convertToResourceLink(), success);
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end

rule "ExtractLinkedTask"
	when
		$wft : WorkflowTask (   getType().getId().equals("Evaluate") &&
								!(getLifecycleState().equals(TaskLifecycle.State.COMPLETED)) &&
								 getAnyOneOutputByRole("jira") == null 
								 , $jama : getAnyOneInputByRole("jama") 								
							 ) @watch( lifecycleState )
		eval ($jama != null )					 
	then
		System.out.println("Extracting jira key from jama issue");
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		String jiraKey = ja.getStringValue("SYS_JIRA_KEY");
		if (!(jiraKey == null || jiraKey.equals("") )){
			commandGateway.send(new AddOutputCmd($wft.getWorkflow().getId(), $wft.getId(), jiraKey, "jira", "IJiraArtifact"));
		}
end

rule "ExtractSubtask"
	when
		$wft : WorkflowTask (   getType().getId().equals("Evaluate") &&
								!(getLifecycleState().equals(TaskLifecycle.State.COMPLETED)) &&
								 getAnyOneOutputByRole("checkissue") == null 
								 , $jira : getAnyOneOutputByRole("jira") 								
							 ) @watch( lifecycleState )
		eval ($jira != null )					 
	then
		System.out.println("Obtaining subtask from jira");
		IJiraArtifact ja = (IJiraArtifact) ((ArtifactWrapper)$jira).getWrappedArtifact();
		// iterate through subtask as find the one containing "Review" or other text as desired
		Iterator<IJiraSubtask> subtasks = ja.getSubtasks().iterator();
		while (subtasks.hasNext()) {
			IJiraSubtask st = subtasks.next();
			if (st.getSummary().contains("Review")) {
				System.out.println("Found Review Subtask");
				String jiraKey = st.getIssueKey();
				if (!(jiraKey == null || jiraKey.equals("") )){
					commandGateway.send(new AddOutputCmd($wft.getWorkflow().getId(), $wft.getId(), jiraKey, "checkissue", "IJiraArtifact"));
				}
				break;
			}
		}
end

rule "RemoveConstraintTrigger"
	salience -1000
	when
		$ct : ConstraintTrigger()
	then
		delete($ct);
end