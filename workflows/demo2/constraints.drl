package processdefinition;

import org.axonframework.commandhandling.gateway.CommandGateway;

import passiveprocessengine.instance.QACheckDocument;
import passiveprocessengine.instance.WorkflowTask;
import passiveprocessengine.instance.ResourceLink;
import java.util.Optional;
import passiveprocessengine.instance.RuleEngineBasedConstraint;
import java.time.Instant;
import passiveprocessengine.instance.CorrelationTuple;
import passiveprocessengine.instance.ConstraintTrigger;
import passiveprocessengine.instance.WorkflowInstance;
import passiveprocessengine.instance.ArtifactWrapper;

import impactassessment.api.Commands.AddEvaluationResultToConstraintCmd;
import impactassessment.api.Commands.AddOutputCmd;
import impactassessment.api.Commands.AddConstraintsCmd;
import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.ArrayList;

import artifactapi.IArtifactRegistry;
import artifactapi.jira.IJiraArtifact;
import artifactapi.jama.IJamaArtifact;
import artifactapi.jira.subtypes.IJiraIssueLink;
import artifactapi.IArtifactRegistry;

import impactassessment.kiesession.KieSessionUtils;
import java.util.Map;
import java.util.HashMap;


import passiveprocessengine.instance.ResourceLink;
import passiveprocessengine.instance.WorkflowTask;
import artifactapi.jama.subtypes.IJamaRelease
import impactassessment.artifactconnector.jama.JamaArtifact
import artifactapi.ArtifactIdentifier
import impactassessment.artifactconnector.jira.JiraArtifact
import artifactapi.IArtifact;
import c4s.impactassessment.workflowmodel.TaskLifecycle.*;

import passiveprocessengine.definition.*;
import passiveprocessengine.instance.*;
import passiveprocessengine.definition.ArtifactTypes;
import passiveprocessengine.definition.ArtifactType;

global CommandGateway commandGateway;
global IArtifactRegistry artifactRegistry;

//constraints for state open
rule "InsertQAConstraintsDemo"
	when
		$wft : WorkflowTask(    getType().getId().equals("DemoTask2") &&
		                        getAnyOneOutputByRole(ArtifactTypes.ARTIFACT_TYPE_QA_CHECK_DOCUMENT) == null)
	then
        Map<String, String> constraints = new HashMap<>();
        constraints.put("CheckJiraExists", "Is there a jira artifact linked ?");
        commandGateway.send(new AddConstraintsCmd($wft.getWorkflow().getId(), $wft.getId(), constraints));
end


rule "CheckJiraExists" 
	no-loop
	when
		$ct : ConstraintTrigger()
		$qac : RuleEngineBasedConstraint( isAffectedBy($ct) && getConstraintType().equals( "CheckJiraExists" ))
		$wft : WorkflowTask( getType().getId().equals("DemoTask2") 
		, $jira : getAnyOneOutputByRole("jira") 
		,  $jama : getAnyOneInputByRole("jama")
		)
		eval ($jama != null)
	then
		System.out.println("Checking: "+$qac.getId() +" in workflow " +$wft.getWorkflow().getId());
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		boolean doesExist = ($jira != null);
		Map<ResourceLink, Boolean> result = new HashMap<ResourceLink, Boolean>();
		if (!doesExist)
			result.put(ja.convertToResourceLink(), doesExist);
		else {
			IJiraArtifact jira = (IJiraArtifact) ((ArtifactWrapper)$jira).getWrappedArtifact();
			result.put(jira.convertToResourceLink(), doesExist);
		}
		commandGateway.send(new AddEvaluationResultToConstraintCmd($qac.getWorkflow().getId(), $qac.getId(), result, $ct.getRequestCorrelation(), Instant.now()));
end




rule "ExtractDemoTask"
	when
		$wft : WorkflowTask (   getType().getId().equals("DemoTask2") &&
								!(getLifecycleState().equals(TaskLifecycle.State.COMPLETED)) &&
								 getAnyOneOutputByRole("jira") == null 
								 , $jama : getAnyOneInputByRole("jama") 								
							 ) @watch( lifecycleState )
		eval ($jama != null )					 //"UAV-1196"
	then
		IJamaArtifact ja = (IJamaArtifact) ((ArtifactWrapper)$jama).getWrappedArtifact();
		String jiraKey = ja.getStringValue("SYS_JIRA_KEY");
		if (!(jiraKey == null || jiraKey.equals("") )){
			IJiraArtifact artOut = (IJiraArtifact) artifactRegistry.get(new ArtifactIdentifier(jiraKey, "IJiraArtifact"), $wft.getWorkflow().getId()).get();
			Artifact art = new ArtifactWrapper(artOut.getKey(), "IJiraArtifact", $wft.getWorkflow(), artOut);
			commandGateway.send(new AddOutputCmd($wft.getWorkflow().getId(), $wft.getId(), art, "jira", new ArtifactType("IJiraArtifact") ));
		}
end


rule "RemoveConstraintTrigger"
	salience -1000
	when
		$ct : ConstraintTrigger()
	then
		delete($ct);
end