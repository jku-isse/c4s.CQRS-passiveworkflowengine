package processdefinition;

import org.axonframework.commandhandling.gateway.CommandGateway;

import java.util.stream.Collectors;
import java.util.Optional
import java.time.Instant
import java.util.concurrent.TimeUnit
import java.util.List
import java.util.ArrayList
import java.util.Map
import java.util.HashMap
import java.util.LinkedHashMap
import java.util.Iterator;
import java.net.URL;

import passiveprocessengine.definition.ArtifactTypes
import passiveprocessengine.instance.*
import passiveprocessengine.definition.*
import passiveprocessengine.definition.TaskLifecycle.State;

import artifactapi.ResourceLink
import artifactapi.IArtifactRegistry
import artifactapi.ArtifactIdentifier
import artifactapi.IArtifactRegistry
import at.jku.designspace.sdk.polarion.interfaces.*
import artifactapi.jira.IJiraArtifact
import artifactapi.jira.subtypes.*

import org.jsoup.Jsoup
import org.jsoup.nodes.*
import c4s.impactassessment.tools.*

import impactassessment.kiesession.KieSessionUtils
import impactassessment.api.Commands.*
import impactassessment.api.Events.*
import org.axonframework.commandhandling.gateway.CommandGateway


global CommandGateway commandGateway;
global IArtifactRegistry artifactRegistry;

/**/
rule "TempData"
	no-loop
	when
		$wft : WorkflowTask (   getType().getId().equals("Open") )
		not NamedHashMap ( name.equalsIgnoreCase($wft.getId()+"TempData") )
	then
		NamedHashMap<String, String> tempData = new NamedHashMap<String, String>($wft.getId()+"TempData");
		insert(tempData);
end

rule "SpawnProcesses"
	no-loop
	when
		$wft : WorkflowTask (   getType().getId().equals("Open") &&
								!(getActualLifecycleState().equals(TaskLifecycle.State.COMPLETED)) 
								 , $item : getAnyOneInputByRole("jira") 								
							 ) 
		eval ($item != null )	
		$tempData : NamedHashMap (name.equalsIgnoreCase($wft.getId()+"TempData") )				 
	then
		
		IJiraArtifact jira = (IJiraArtifact)$item;
		Iterator<IJiraIssueLink> links = jira.getIssueLinks().iterator();
		while(links.hasNext()) {
			IJiraIssueLink link = links.next();
			String key = link.getTargetIssueKey();
			if ( $wft.getAnyOneOutputByRole(key) == null){
			// only if there is no such output recorded yet
				commandGateway.send(new AddOutputCmd($wft.getWorkflow().getId(), $wft.getId(), key, key, "IJiraArtifact"));
				
				// alternatively we could collect the outputs in a well known role, and then iterate through the role to check for its presence			
				
				// we create a workflow of this workflow for sake of demonstrations
				// for each linked item, using the itemkey as process id
				// as input we use the item,
				Map<String, String> input = new HashMap<String, String>();
				// an input entry consists of the identifier of the artifact, and as value a concatination of role :: type
				input.put(key, "jira::IJiraArtifact"); // role/type concatination is not nice
				
				if (!$tempData.containsKey(key)){
					System.out.println("Spawning process for related item:"+key);
					commandGateway.send(new CreateWorkflowCmd(key, input ,"POLARION_TEST2" ));
				}
				modify($tempData) { put(key, key)};
			}
		}
end
/**/

